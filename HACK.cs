using System;
using System.Collections.Generic;
using System.Reflection;
using UnityEngine;
using ProtoBuf;
using System.Collections;
using UnityEngine.Rendering;
using Network;
using System.Runtime.InteropServices;
using Facepunch;
using System.IO;

public class HACK : MonoBehaviour
{

    public static Vector3 GetScreenPos(Vector3 position)
    {
        return MainCamera.mainCamera.WorldToScreenPoint(position);
    }
    public static string string_1;
    private IEnumerator newsilentmeleefarm()
    {
        for (; ; )
        {
            try
            {
                if (LocalPlayer.Entity != null && BaseEntityEx.IsValid(LocalPlayer.Entity) && CFG.Misc.ouioiu && global::BasePlayer.visiblePlayerList != null)
                {
                    Vector3 vector = LocalPlayer.Entity.eyes.position;
                    HeldEntity heldEntity = LocalPlayer.Entity.GetHeldEntity();
                    if (heldEntity != null)
                    {
                        BaseEntity baseEntity = null;
                        BaseEntity baseEntity2 = null;
                        float num = float.MaxValue;
                        float num2 = float.MaxValue;
                        bool flag = false;
                        int itemid = heldEntity.GetItem().info.itemid;
                        if (itemid == -1506397857 || itemid == 1711033574 || itemid == -1583967946 || itemid == -1252059217 || itemid == -262590403 || itemid == 1104520648 || itemid == 963906841)
                        {
                            flag = true;
                        } foreach (TreeEntity b in companent.trees)
                        {
                            BaseEntity baseEntity3 = b as BaseEntity;
                            if (!(baseEntity3 == null) && BaseEntityEx.IsValid(baseEntity3) && global::BasePlayer.visiblePlayerList != null)
                            {
                                if (flag)
                                {

                                    {
                                        float num3 = Vector3.Distance(vector, baseEntity3.transform.position);
                                        if (num3 <= 5f && num3 < num)
                                        {
                                            baseEntity = baseEntity3;
                                            num = num3;
                                        }

                                        else if (baseEntity3 is TreeEntity)
                                        {
                                            Vector3 position = baseEntity3.transform.position;
                                            position.y = vector.y;
                                            float num4 = Vector3.Distance(vector, position);
                                            if (num4 <= 3.5f && num4 < num2)
                                            {
                                                baseEntity2 = baseEntity3;
                                                num2 = num4;
                                            }
                                        }
                                    }
                                }
                            }
                            if (baseEntity2 != null)
                            {
                                Vector3 vector4;
                                RaycastHit raycastHit;
                                if (baseEntity != null)
                                {
                                    Vector3 vector3 = baseEntity2.transform.position - baseEntity.transform.position;
                                    vector3.y = 0f;
                                    vector3.Normalize();
                                    vector = baseEntity.transform.position - vector3;
                                    vector4 = baseEntity.transform.position;
                                }
                                else if (GamePhysics.Trace(new Ray(LocalPlayer.Entity.eyes.position, (baseEntity2.transform.position - LocalPlayer.Entity.eyes.position).normalized), 0f, out raycastHit, 15f, 1101212417, 0))
                                {
                                    vector4 = raycastHit.point;
                                }
                                else
                                {
                                    vector4 = baseEntity2.transform.position;
                                }
                                this.silent(vector, vector4, baseEntity2.net.ID, heldEntity);
                            }
                        }
                    }
                } }
            catch (Exception)
            {
            }
            yield return new WaitForSeconds(0.1f);
        }
    }

    private void silent(Vector3 A_1, Vector3 A_2, uint A_3, HeldEntity A_4)
    {
        AttackEntity attackEntity = A_4 as AttackEntity;
        bool flag = attackEntity == null;
        if (!flag)
        {
            bool flag2 = Time.time - this.float_0 < attackEntity.repeatDelay;
            if (!flag2)
            {
                Ray ray = new Ray(A_1, (A_2 - A_1).normalized);
                using (PlayerAttack playerAttack = Pool.Get<PlayerAttack>())
                {
                    using (Attack attack = Pool.Get<Attack>())
                    {
                        playerAttack.attack = attack;
                        playerAttack.attack.hitID = A_3;
                        playerAttack.attack.hitPositionWorld = A_2;
                        playerAttack.attack.hitNormalWorld = ray.direction;
                        playerAttack.attack.pointStart = A_1;
                        playerAttack.attack.pointEnd = A_2;
                        attackEntity.ServerRPC("PlayerAttack", playerAttack,null,null,null,null);
                    }
                }
                this.float_0 = Time.time;
            }
        }


    }
    private void OnGUI()
    {
        if (CFG.Misc.ZALYPA && UnityEngine.Input.GetKeyDown(KeyCode.L))
        {
            biglootdrop();
        }
        bool flag212 = targ == null;
        if (flag212)
        {
            foreach (BuildingPrivlidge basePlayer in companent.tcshit)
            {

                targ = basePlayer;

            }
        }
        bool flag22 = localplayer == null;
        if (flag22)
        {
            foreach (BasePlayer basePlayer in BasePlayer.visiblePlayerList)
            {
                bool flag2 = basePlayer.IsLocalPlayer();
                if (flag2)
                {
                    localplayer = basePlayer;
                }
            }
        }
    }
    public void biglootdrop()
    {
        if (LocalPlayer.Entity != null && BaseEntityEx.IsValid(LocalPlayer.Entity) && LocalPlayer.Entity.inventory != null)
        {
            base.StartCoroutine(this.biggerboobs(LocalPlayer.Entity.inventory));
        }
    }
    private bool u0014;
    private WaitForSeconds u001D = new WaitForSeconds(0.400f);

    private IEnumerator u001A(ItemContainer A_1)
    {
        List<Item> list = Facepunch.Pool.GetList<Item>();
        list.AddRange(A_1.itemList);
        foreach (Item item in list)
        {
            for (int i = 1; i <= item.amount; i++)
            {
                LocalPlayer.ItemCommandEx(item.uid, "drop", 1,null,null);
                yield return this.u001D;
            }
        }
        Facepunch.Pool.Free<List<Item>>(ref list);

        this.u0014 = false;
        yield break;

    }
    private IEnumerator biggerboobs(PlayerInventory A_1)
    {
        if (A_1.containerBelt != null)
        {
            this.u0014 = true;
            base.StartCoroutine(this.u001A(A_1.containerBelt));
        }
        while (this.u0014)

        {
            yield return this.u001D;
        }
        if (A_1.containerMain != null)

        {
            this.u0014 = true;
            base.StartCoroutine(this.u001A(A_1.containerMain));
        }
        while (this.u0014)

        {
            yield return this.u001D;
        }
        if (A_1.containerWear != null)

        {
            this.u0014 = true;
            base.StartCoroutine(this.u001A(A_1.containerWear));
        }
        while (this.u0014)

        {
            yield return this.u001D;
        }
        if (A_1.loot != null && A_1.loot.containers.Count > 0)

        {
            foreach (ItemContainer itemContainer in A_1.loot.containers)
            {
                this.u0014 = true;
                base.StartCoroutine(this.u001A(itemContainer));
                while (this.u0014)
                {
                    yield return this.u001D;
                }
            }
        }
        yield break;
    }

    private float distance; private float float_0;
    private void Update()
    {
        if (menu.frre && UnityEngine.Input.GetKeyDown(KeyCode.Alpha9))
        {
            friend.AddFriend();
        }
        if (CFG.Misc.adsfdgrege)
        {
            try
            {
                foreach (BasePlayer basePlayer2 in BasePlayer.visiblePlayerList)
                {
                    if (basePlayer2.IsLocalPlayer())
                    {
                        typeof(PlayerWalkMovement).GetField("groundAngleNew", BindingFlags.Instance | BindingFlags.NonPublic | BindingFlags.GetField).SetValue(basePlayer2.movement, 0f);
                        typeof(PlayerWalkMovement).GetField("grounded", BindingFlags.Instance | BindingFlags.NonPublic | BindingFlags.GetField).SetValue(basePlayer2.movement, true);
                        typeof(PlayerWalkMovement).GetField("groundAngle", BindingFlags.Instance | BindingFlags.NonPublic | BindingFlags.GetField).SetValue(basePlayer2.movement, 0f);
                    }
                }
            }
            catch (NullReferenceException)
            {
            }
        }

        if (CFG.Misc.winrar && LocalPlayer.Entity != null && BaseEntityEx.IsValid(LocalPlayer.Entity))
        {
            HeldEntity heldEntity = LocalPlayer.Entity.GetHeldEntity();
            BaseMelee baseMelee = heldEntity as BaseMelee;
            if (baseMelee == null)
            {
                return;
            }
            if (UnityEngine.Time.time - this.float_0 < baseMelee.repeatDelay)
            {
                return;
            }
            {
                bool flag = false;
                int itemid = heldEntity.GetItem().info.itemid;
                if (itemid == -1506397857 || itemid == 1711033574 || itemid == -1780802565 || itemid == 171931394 || itemid == -1302129395 || itemid == 1488979457 || itemid == 963906841)
                {
                    flag = true;
                }
                if (flag)
                {
                    foreach (BaseResource player in companent.orehotspot)
                    {
                        if (player != null && !player && BaseEntityEx.IsValid(player) && BaseEntityEx.IsValid(baseMelee))
                        {

                            {
                                using (PlayerAttack playerAttack = Facepunch.Pool.Get<PlayerAttack>())
                                {
                                    using (Attack attack = Facepunch.Pool.Get<Attack>())
                                    {
                                        playerAttack.attack = attack;
                                        playerAttack.attack.hitID = player.net.ID;
                                        playerAttack.attack.hitBone = 0;
                                        playerAttack.attack.hitPositionWorld = player.transform.position;
                                        playerAttack.attack.hitNormalWorld = (MainCamera.mainCamera.transform.position - player.transform.position).normalized;
                                        playerAttack.attack.pointStart = localplayer.eyes.position;
                                        playerAttack.attack.pointEnd = player.transform.position;
                                        playerAttack.attack = attack;

                                        baseMelee.ServerRPC("PlayerAttack", playerAttack,null,null,null,null);

                                    }
                                };
                                this.float_0 = UnityEngine.Time.time;
                            }
                        }
                    }
                }
            }





        }
        if (CFG.Misc.walkon)
        {

            foreach (BasePlayer basePlayer2 in BasePlayer.visiblePlayerList)
            {
                if (basePlayer2.IsLocalPlayer())
                {
                    typeof(PlayerWalkMovement).GetField("groundAngleNew", BindingFlags.Instance | BindingFlags.NonPublic | BindingFlags.GetField).SetValue(basePlayer2.movement, 0f);
                    typeof(PlayerWalkMovement).GetField("grounded", BindingFlags.Instance | BindingFlags.NonPublic | BindingFlags.GetField).SetValue(basePlayer2.movement, true);
                    typeof(PlayerWalkMovement).GetField("groundAngle", BindingFlags.Instance | BindingFlags.NonPublic | BindingFlags.GetField).SetValue(basePlayer2.movement, 0f);
                }
            }
        }
    }
    private IEnumerator Updating9445()
    {
        while (true)
        {
            try
            {

               
                if (CFG.Misc.NAXYI)
                {
                  
                    foreach (BasePlayer visiblePlayer in BasePlayer.visiblePlayerList)
                    {
                        foreach (MedicalTool tool in companent.fuck)
                        {
                            HeldEntity entity = LocalPlayer.Entity.GetHeldEntity();
                            int lock_distance3 = (int)Vector3.Distance(LocalPlayer.Entity.transform.position, entity.transform.position);
                            int lock_distance4 = (int)Vector3.Distance(LocalPlayer.Entity.transform.position, visiblePlayer.transform.position);
                            int lock_distance5 = (int)Vector3.Distance(LocalPlayer.Entity.transform.position, tool.transform.position);
                            bool flag2 = entity is MedicalTool && visiblePlayer.health <= 87f && (float)lock_distance3 <= 2f && (float)lock_distance5 <= 2f && (float)lock_distance4 <= 2f;
                            if (flag2)
                            {
                                entity.ServerRPC("UseSelf", null, null, null, null, null);
                            }
                        }
                    }
                }
            

            }
            catch
            {
            }
            yield return new WaitForSeconds(0.5f);
        }
    }
    private IEnumerator Updating94145()
    {
        while (true)
        {
            try
            {

              
                if (CFG.Misc.AASDD && UnityEngine.Input.GetKey(KeyCode.F))
                {
                    foreach (GrenadeWeapon nigger in companent.ssss)
                    {
                        HeldEntity ff = LocalPlayer.Entity.GetHeldEntity();
                        int lock_distance = (int)Vector3.Distance(LocalPlayer.Entity.transform.position, ff.transform.position);
                        if (ff is GrenadeWeapon && lock_distance <= 4f)
                        {
                            ff.ServerRPC("DoThrow", ff.transform.position, LocalPlayer.Entity.eyes.BodyForward() , 1f, null, null);
                        }
                    }
                }
                if (menu.test3 && UnityEngine.Input.GetKey(KeyCode.F))
                {
                    foreach (GrenadeWeapon nigger in companent.ssss)
                    {
                        HeldEntity ff = LocalPlayer.Entity.GetHeldEntity();
                        int lock_distance = (int)Vector3.Distance(LocalPlayer.Entity.transform.position, ff.transform.position);
                        if (ff is GrenadeWeapon && lock_distance <= 4f)
                        {
                            ff.ServerRPC("DoDrop", ff.transform.position, LocalPlayer.Entity.eyes.BodyForward(), 1f, null, null);
                        }
                    }
                }
                


            }
            catch
            {
            }
            yield return new WaitForSeconds(0.2f);
        }
    }
    private IEnumerator Updating94415()
    {
        while (true)
        {
            try
            {
                bool flag = localplayer != null;
                if (flag)
                {
                    if (menu.mbnbnm && localplayer.modelState != null)

                    {
                        localplayer.modelState.waterLevel = 99999f;
                    }
                    if (menu.mmmm && localplayer.modelState != null)

                    {
                        localplayer.modelState.waterLevel = 0;
                    }




                }
            }
            catch
            {
            }
            yield return new WaitForSeconds(0f);
        }
    }

    private IEnumerator Updating94456()
    {
        while (true)
        {
            try
            {
                if (CFG.Misc.ZAEB && UnityEngine.Input.GetKey(KeyCode.F))
                {

                    {
                        HeldEntity entity = LocalPlayer.Entity.GetHeldEntity();
                        MedicalTool nigger = localplayer.GetHeldEntity().GetComponent<MedicalTool>();
                        int lock_distance = (int)Vector3.Distance(LocalPlayer.Entity.transform.position, entity.transform.position);
                        BasePlayer target = nigger.GetTarget();
                        if (entity is MedicalTool && lock_distance <= 4f)
                        {
                            entity.ServerRPC("UseOther", target.net.ID,null,null,null,null);
                        }
                    }
                }
                if (UnityEngine.Input.GetKey(KeyCode.U) && CFG.Misc.oiuytgbmnb)
                {
                    foreach (BuildingPrivlidge buildingPrivlidge in companent.tcshit)
                    {
                        if (buildingPrivlidge != null)
                        {

                            if (Vector3.Distance(localplayer.transform.position, buildingPrivlidge.transform.position) <= 5f)
                            {
                                buildingPrivlidge.ServerRPC("ClearList", null, null, null, null);
                                buildingPrivlidge.ServerRPC("AddSelfAuthorize", null, null, null, null);
                            }
                        }
                    }
                }
                if (CFG.Misc.vbfgcvvcv)
                {
                    foreach (Landmine land in companent.land)
                    {
                        if (land != null)
                        {
                            if (Vector3.Distance(localplayer.transform.position, land.transform.position) <= 5f)
                            {
                                land.ServerRPC("RPC_Disarm", null, null, null, null);
                            }
                        }
                    }
                }
                if (CFG.Misc.vbfgcvvcv)
                {
                    foreach (BearTrap land1 in companent.land1)
                    {
                        if (land1 != null)
                        {
                            if (Vector3.Distance(localplayer.transform.position, land1.transform.position) <= 5f)
                            {

                                land1.ServerRPC("RPC_PickupStart", null, null, null, null); 
                            }
                        }
                    }
                }
                if (CFG.Misc.adsafsddvcvc)
                {
                    foreach (AutoTurret autoTurret in companent.autoturretsss)
                    {
                        if (Vector3.Distance(localplayer.transform.position, autoTurret.transform.position) <= 5f)

                            autoTurret.ServerRPC("AddSelfAuthorize", null, null, null, null);
                    }
                }

            }

            catch
            {
            }
            yield return new WaitForSeconds(0.4f);
        }
    }
    public IEnumerator yasssss4t()
    {
        Vector2 centerScreen = new Vector2(Screen.width / 2f, Screen.height / 2f);
        foreach (BasePlayer player in BasePlayer.visiblePlayerList)
        {





            if (player != null && !player.IsDead() && !player.IsSleeping())
            {
                int dist = (int)Vector3.Distance(MainCamera.mainCamera.transform.position, player.model.headBone.transform.position);
                Vector3 vector = MainCamera.mainCamera.WorldToScreenPoint(player.model.headBone.transform.position);
                Vector3 screenPos = Players.GetScreenPos(player.transform.position);
                if (screenPos.z > 0f && LocalPlayer.Entity && UnityEngine.Input.GetKey(KeyCode.X))
                {
                    {
                        GameManager.client.CreatePrefab("assets/prefabs/misc/supply drop/supply_drop.prefab", player.model.headBone.transform.position + new Vector3(0f, 25f, 0f), Quaternion.Euler(player.model.transform.rotation.x, 100f, 0f), true);
                    }
                }

            }
            yield return new WaitForSeconds(0.100f);
        }
    }
  
    private IEnumerator MiscFuncs11()
    {
        while (true)
        {
            try

            {

                bool flag = localplayer != null;
                if (flag)
                {


                    if (menu.nnn)
                    {
                        LocalPlayer.Entity.SendSignalBroadcast(BaseEntity.Signal.Gesture, "drop_item");
                        LocalPlayer.Entity.SendSignalBroadcast(BaseEntity.Signal.Gesture, "pickup_item");

                        LocalPlayer.Entity.SendSignalBroadcast(BaseEntity.Signal.Gesture, "drink");



                    }


                }
            }
            catch
            {
            }
            yield return new WaitForSeconds(0.1f);
        }
    }
    private IEnumerator MiscFuncs111()
    {
        while (true)
        {
            try
            {

                bool flag = localplayer != null;
                if (flag)
                {


                    if (menu.test41)
                    {

                      
                        
                        LocalPlayer.Entity.SendSignalBroadcast(BaseEntity.Signal.Reload);


                    }

                }


            }
            catch
            {
            }
            yield return new WaitForSeconds(0.25f);
        }
    }
    private IEnumerator MiscFuncs1()
    {
        bool multiJump_Hooked = false;
        bool hookedshit = false;
        bool aimwhilesprinting = false;
        bool noaimcone = false;
        bool speed = false;
        bool shotgunspread = false;

        bool darkness1 = false;
        bool darkness = false;
        float oldswimshit = 0f; float oldshit = 0f; float oldshit1 = 0f;

        while (true)
        {
            try
            {
                bool f = false; bool ff = false; bool fff = false; bool ffff = false;
                bool attackAnywhere_Hooked11 = false;
                bool attackAnywhere_Hooked1 = false;
                bool attackAnywhere_Hooked = false;
                if (localplayer != null)
                {
                    if (CFG.Misc.cahh || CFG.Aimbot.qewqefdsf || CFG.Aimbot.BulletDropPrediction || CFG.Aimbot.dffs)
                    {
                        if (!darkness1)
                        {
                            boredasf1.Hook();
                            darkness1 = true;
                        }
                    }
                   
                    if (ESP.свет)
                    {
                        if (!darkness)
                        {
                            resetter.Hook();
                            darkness = true;
                        }
                    }
                    else
                    {
                        if (darkness)
                        {
                            resetter.Hook();
                            darkness = false;
                        }
                    }
                    if (CFG.Misc.eeeeeeeee)
                    {
                        if (!aimwhilesprinting)
                        {
                            canaim.Hook();
                            canaim1.Hook();
                            aimwhilesprinting = true;
                        }
                    }
                    else
                    {
                        if (aimwhilesprinting)
                        {
                            canaim.Unhook();
                            canaim1.Unhook();
                            aimwhilesprinting = false;
                        }
                    }
                    if (CFG.Misc.offd)
                    {
                        if (!hookedshit)
                        {
                            hahyea.Hook();
                            hookedshit = true;
                        }
                    }
                    else
                    {
                        if (hookedshit)
                        {
                            hahyea.Unhook();
                            hookedshit = false;
                        }
                    }

                    if (CFG.Misc.asawersffd)
                    {
                        if (!multiJump_Hooked)
                        {
                            jump.Hook();
                            multiJump_Hooked = true;
                        }

                        else

                        if (multiJump_Hooked)
                        {
                            jump.Unhook();
                            multiJump_Hooked = false;
                        }
                    }


                    if (CFG.Misc.blats)
                    {
                        if (!speed)
                        {
                            ggdsfdf.Hook();
                            speed = true;
                        }

                        else

                        if (speed)
                        {
                            ggdsfdf.Unhook();
                            speed = false;
                        }
                    }
                    if (CFG.Misc.podgs)
                    {
                        if (oldshit1 == 0f)
                            oldshit1 = HACK.localplayer.movement.GetComponent<PlayerWalkMovement>().gravityMultiplier;
                        HACK.localplayer.movement.GetComponent<PlayerWalkMovement>().gravityMultiplier = oldshit1 / 2f;
                    }
                    else
                    {
                        if (oldshit1 != 0f)
                            HACK.localplayer.movement.GetComponent<PlayerWalkMovement>().gravityMultiplier = oldshit1;
                    }





                  


                    if (CFG.Aimbot.cdddeee)
                    {
                        if (!noaimcone)
                        {
                            aimcone.Hook();
                            noaimcone = true;
                        }
                    }
                    if (CFG.Aimbot.sfwewwww)
                    {
                        if (!shotgunspread)
                        {
                            shotgunspread1.Hook();
                            shotgunspread = true;
                        }
                    }
                    if (CFG.Aimbot.dfdswe)
                    {
                        if (!attackAnywhere_Hooked)
                        {
                            canAttack.Hook();
                            attackAnywhere_Hooked = true;
                        }
                    }
                    else
                    {
                        if (attackAnywhere_Hooked)
                        {
                            canAttack.Unhook();
                            attackAnywhere_Hooked = false;
                        }
                    }
                    if (menu.mmmm)
                    {
                        if (!attackAnywhere_Hooked1)
                        {
                            canAttack.Hook();
                            attackAnywhere_Hooked1 = true;
                        }
                    }
                    else
                    {
                        if (attackAnywhere_Hooked1)
                        {
                            canAttack.Unhook();
                            attackAnywhere_Hooked1 = false;
                        }
                    }
                    if (menu.test)
                    {
                        if (!attackAnywhere_Hooked11)
                        {
                            canAttack.Hook();
                            attackAnywhere_Hooked11 = true;
                        }
                    }
                    else
                    {
                        if (attackAnywhere_Hooked11)
                        {
                            canAttack.Unhook();
                            attackAnywhere_Hooked11 = false;
                        }
                    }
                    if (CFG.Misc.hyk)
                    {
                        BowWeapon bow = localplayer.GetHeldEntity().GetComponent<BowWeapon>();
                        {
                            if (bow != null)
                            {
                                bow.recoil = null;
                                bow.automatic = true;
                                bow.aiming = true;
                                bow.aimCone = 0f;
                                nig.SetValue(bow, true);
                            }
                        }
                    }
                    if (CFG.Misc.walkon && UnityEngine.Input.GetKey(KeyCode.C))
                    {

                        HACK.localplayer.movement.GetComponent<PlayerWalkMovement>().SetPrivateField("flying", true);
                        if (oldshit == 0f)
                            oldshit = HACK.localplayer.movement.GetComponent<PlayerWalkMovement>().gravityMultiplier;
                        HACK.localplayer.movement.GetComponent<PlayerWalkMovement>().gravityMultiplier = 0f;

                    }
                    else
                    {
                        if (oldshit != 0f)
                            HACK.localplayer.movement.GetComponent<PlayerWalkMovement>().gravityMultiplier = oldshit;
                    }
                    if (CFG.Misc.df && UnityEngine.Input.GetKey(KeyCode.Z))
                    {

                        HACK.localplayer.movement.GetComponent<PlayerWalkMovement>().SetPrivateField("flying", true);
                        if (oldshit == 0f)
                            oldshit = HACK.localplayer.movement.GetComponent<PlayerWalkMovement>().gravityMultiplier;
                        HACK.localplayer.movement.GetComponent<PlayerWalkMovement>().gravityMultiplier = 0f;

                    }
                    else
                    {
                        if (oldshit != 0f)
                            HACK.localplayer.movement.GetComponent<PlayerWalkMovement>().gravityMultiplier = oldshit;
                    }






                    if (CFG.Misc.ASDADAD)
                    {
                        if (oldswimshit == 0f)
                            oldswimshit = HACK.localplayer.movement.GetComponent<PlayerWalkMovement>().gravityMultiplierSwimming;
                        HACK.localplayer.movement.GetComponent<PlayerWalkMovement>().gravityMultiplierSwimming = oldswimshit / -1f;
                    }
                    else
                    {
                        if (oldswimshit != 0f)
                            HACK.localplayer.movement.GetComponent<PlayerWalkMovement>().gravityMultiplierSwimming = oldswimshit;
                    }
                    if (CFG.Misc.dfdf)
                    {
                        Vector2 centerScreen = new Vector2(Screen.width / 2f, Screen.height / 2f);
                        foreach (SupplyDrop player in companent.airdrops)
                        {

                            if (player != null)
                            {
                                int distanceFromCenter = (int)(Vector2.Distance(MainCamera.mainCamera.WorldToScreenPoint(player.transform.position), centerScreen));
                                Vector3 onScreen = player.transform.position - MainCamera.mainCamera.transform.position;
                                if (distanceFromCenter <= menu.fov && Vector3.Dot(MainCamera.mainCamera.transform.TransformDirection(Vector3.forward), onScreen) > 0)
                                    ;
                            }

                            if (player != null)
                            {
                                int dist = (int)Vector3.Distance(MainCamera.mainCamera.transform.position, player.transform.position);
                                Vector3 vector = MainCamera.mainCamera.WorldToScreenPoint(player.transform.position);
                                Vector3 screenPos = Players.GetScreenPos(player.transform.position);
                                if (screenPos.z > 0f && dist <= player1 && UnityEngine.Input.GetKey(KeyCode.X))
                                {
                                    bool niggeribtch = false;
                                    uint uiEntityId = 0;
                                    Vector3 targetpos = LocalPlayer.Entity.transform.position = player.transform.position + new Vector3(0f, teleportheight, 0f);
                                    LocalPlayer.Entity.ServerRPC("RPC_StartClimb", niggeribtch, targetpos, uiEntityId, null, null);
                                }
                            }
                        }
                    }
                    if (CFG.Misc.ahahahha)
                    {
                        Vector2 centerScreen = new Vector2(Screen.width / 2f, Screen.height / 2f);
                        foreach (BasePlayer player in BasePlayer.visiblePlayerList)
                        {

                            if (player != null && !player.IsSleeping() && !player.IsDead())
                            {
                                int distanceFromCenter = (int)(Vector2.Distance(MainCamera.mainCamera.WorldToScreenPoint(player.model.headBone.transform.position), centerScreen));
                                Vector3 onScreen = player.transform.position - MainCamera.mainCamera.transform.position;
                                if (!player.IsLocalPlayer() && player.health > 0f && Vector3.Dot(MainCamera.mainCamera.transform.TransformDirection(Vector3.forward), onScreen) > 0)
                                    ;
                            }


                            int dist = (int)Vector3.Distance(LocalPlayer.Entity.transform.position, player.transform.position);
                            Vector3 screenPos = Players.GetScreenPos(player.transform.position);
                            if (screenPos.z > 0f && player != null && !player.IsDead() && !player.IsSleeping() && !player.IsLocalPlayer() && dist <= player1 && UnityEngine.Input.GetKey(KeyCode.X))
                            {
                                bool niggeribtch = false;
                                uint uiEntityId = 0;
                                Vector3 targetpos = LocalPlayer.Entity.transform.position = player.transform.position + new Vector3(0f, teleportheight, 0f);
                                LocalPlayer.Entity.ServerRPC("RPC_StartClimb", niggeribtch, targetpos, uiEntityId, null, null);
                            }
                        }
                    }


                }
            }
            catch (Exception)
            {

            }

            yield return new WaitForSeconds(0.01f);

        }
    }
    public void UpdateAmbient()
    {

        RenderSettings.ambientMode = AmbientMode.Flat;
        RenderSettings.ambientLight = (ESP.свет ? youabitch : youabitch1);
        RenderSettings.ambientIntensity = 1f;



    }
    private static UnityEngine.Color youabitch = new UnityEngine.Color(0.9f, 0.9f, 0.9f, 0.9f);
    private static UnityEngine.Color youabitch1 = new UnityEngine.Color(0.2f, 0.2f, 0.2f, 0.2f);
    public void UpdateAmbientTrampoline()
    {
        int a = 12;
        int b = 9;
        int c = 12 * 9 - 4;
        int d = c * a - 15;
        int e = d + a;
        int f = b + c;
        a = b + 12;
        b = c - 4;
        d = a + b;
        e = a + c + d;
    }

    public static Color32 TargetColor = new Color32(255, 255, 255, 255);
    public static Color32 ScientistColor = new Color32(255, 255, 255, 255);
    public static Color32 CollectablEspColor = new Color32(255, 255, 255, 255);
    public static Color32 PlayerColor = new Color32(255, 255, 255, 255);
    public static Color32 WorldEspColor = new Color32(255, 255, 255, 255);

    public static Dictionary<string, Shader> dictShaders = new Dictionary<string, Shader> { };
    private static FieldInfo nig = typeof(BowWeapon).GetField("attackReady", BindingFlags.Instance | BindingFlags.NonPublic);
   
    public static Shader chamShader1;
    public static FieldInfo _multiMesh = null; 
    [DllImport("kernel32", CharSet = CharSet.Ansi, ExactSpelling = true, SetLastError = true)]
    static extern IntPtr GetProcAddress(IntPtr hModule, string procName);
    private Projectile CreateProjectileBaseMelee(string prefabPath, Vector3 pos, Vector3 forward, Vector3 velocity)
    {
        GameObject gameObject = GameManager.client.CreatePrefab(prefabPath, pos, Quaternion.LookRotation(forward), true);
        if (gameObject == null)
        {
            return null;
        }
        Projectile component = gameObject.GetComponent<Projectile>();
        if (CFG.Aimbot.hhhh)
        {
            component.gravityModifier = 0f;
        }
        if (CFG.Aimbot.uuyyttrrr)
        {
            component.thickness = 100;
        }
        component.InitializeVelocity(velocity);
        return component;
    }
    private Projectile CreateProjectileBaseMeleeTrampoline(string prefabPath, Vector3 pos, Vector3 foward, Vector3 velocity)
    {
        int a = 12;
        int b = 9;
        int c = 12 * 9 - 4;
        int d = c * a - 15;
        int e = d + a;
        int f = b + c;
        a = b + 12;
        b = c - 4;
        d = a + b;
        e = a + c + d;
        return new Projectile();
    }
    private BaseEntity CreateOrUpdateEntity(ProtoBuf.Entity info, long size)
    {
        return CreateOrUpdateEntityTrampoline(info, size);
    }

    private BaseEntity CreateOrUpdateEntityTrampoline(ProtoBuf.Entity info, long size)
    {
        int a = 12;
        int b = 9;
        int c = 12 * 9 - 4;
        int d = c * a - 15;
        int e = d + a;
        int f = b + c;
        a = b + 12;
        b = c - 4;
        d = a + b;
        e = a + c + d;
        return new BaseEntity(); //arbitrary return value
    }
    DumbHook CreateOrUpdate;
    DumbHook boredasf1;
    DumbHook boredasf12;
    DumbHook boredasf111111;
    [DllImport("kernel32.dll")]
    public static extern IntPtr GetModuleHandle(string lpModuleName);
    private static FieldInfo test11111 = typeof(BaseNetworkable.EntityRealm).GetField("entityList", BindingFlags.Instance | BindingFlags.NonPublic); public static Shader chamShader;

    

   
    void Movement_NoclipTrampoline(InputState input, ModelState modelState)
    {
        int a = 12;
        int b = 9;
        int c = 12 * 9 - 4;
        int d = c * a - 15;
        int e = d + a;
        int f = b + c;
        a = b + 12;
        b = c - 4;
        d = a + b;
        e = a + c + d;
    }

    private void Start()
    { base.StartCoroutine(this.MiscFuncs111());
        base.StartCoroutine(this.MiscFuncs11());
        base.StartCoroutine(this.MiscFuncs1());
        StartCoroutine(Updating94415());
        StartCoroutine(Updating9445());
        StartCoroutine(Updating94145());
        StartCoroutine(Updating94456());
        StartCoroutine(gravityandwalk());

        StartCoroutine(newsilentmeleefarm());
        byte[] yeahhh11111 = { 0x55, 0x48, 0x8b, 0xec, 0x56, 0x57, 0x41, 0x57, 0x48, 0x83, 0xec, 0x28 };
        boredasf111111 = new DumbHook(typeof(BaseMelee), "CreateProjectile", typeof(HACK), "CreateProjectileBaseMelee", typeof(HACK), "CreateProjectileBaseMeleeTrampoline", yeahhh11111);
        boredasf111111.Hook();
   

        byte[] canJumpBytes = { 0x55, 0x48, 0x8b, 0xec, 0x56, 0x48, 0x83, 0xec, 0x08, 0x48, 0x8b, 0xf1 };
        jump = new DumbHook(typeof(PlayerWalkMovement), "CanJump", typeof(HACK), "CanJump", typeof(HACK), "CanJumpTrampoline", canJumpBytes);


        byte[] CanAttackBytes = { 0x55, 0x48, 0x8b, 0xec, 0x56, 0x48, 0x83, 0xec, 0x08, 0x48, 0x8b, 0xf1 };
        canAttack = new DumbHook(typeof(BasePlayer), "CanAttack", typeof(HACK), "CanAttack", typeof(HACK), "CanAttackTrampoline", CanAttackBytes);

        canAttack.Hook();

        byte[] orig9 = new byte[]
{
           0x55, 0x48, 0x8b, 0xec, 0x48, 0x83, 0xec, 0x20, 0xf3, 0x0f, 0x11, 0x4d, 0xf0, 0x90
};
        this.proj = new DumbHook(typeof(global::BasePlayer), "SendProjectileAttack", typeof(HACK), "SendProjectileAttack", typeof(HACK), "SendProjectileAttackTrampoline", orig9);
        this.proj.Hook();

        byte[] aimco = { 0x55, 0x48, 0x8b, 0xec, 0x56, 0x57, 0x41, 0x56, 0x48, 0x83, 0xec, 0x08 };
        aimcone = new DumbHook(typeof(BaseProjectile), "GetAimCone", typeof(HACK), "GetAimCone", typeof(HACK), "GetAimConeTrampoline", aimco);

        byte[] gavu = { 0x55, 0x48, 0x8b, 0xec, 0x48, 0x83, 0xec, 0x20, 0xf3, 0x0f, 0x11, 0x4d, 0xf0, 0x90 };
        ggdsfdf = new DumbHook(typeof(BasePlayer), "GetSpeed", typeof(HACK), "GetSpeed", typeof(HACK), "GetSpeedTrampoline", gavu);

        byte[] byt = { 0x55, 0x48, 0x8b, 0xec, 0x56, 0x57, 0x41, 0x57, 0x48, 0x83, 0xec, 0x28 };
        projshit = new DumbHook(typeof(BaseProjectile), "CreateProjectile", typeof(HACK), "CreateProjectile", typeof(HACK), "CreateProjectileTrampoline", byt);
        projshit.Hook();
       


        byte[] fuckyou = { 0x55, 0x48, 0x8b, 0xec, 0x56, 0x57, 0x41, 0x56, 0x48, 0x83, 0xec, 0x08 };
        resetter = new DumbHook(typeof(TOD_Sky), "UpdateAmbient", typeof(HACK), "UpdateAmbient", typeof(HACK), "UpdateAmbientTrampoline", fuckyou);


        byte[] noper = { 0x55, 0x48, 0x8b, 0xec, 0x56, 0x48, 0x83, 0xec, 0x08, 0x48, 0x8b, 0xf1 };
        canaim = new DumbHook(typeof(BaseProjectile), "CanAim", typeof(HACK), "CanAim", typeof(HACK), "CanAimTrampoline", noper);

        byte[] younigger = { 0x55, 0x48, 0x8b, 0xec, 0x56, 0x48, 0x83, 0xec, 0x08, 0x48, 0x8b, 0xf1 };
        canaim1 = new DumbHook(typeof(PlayerWalkMovement), "CanSprint", typeof(HACK), "CanSprint", typeof(HACK), "CanSprintTrampoline", younigger);

        byte[] yeahhh1 = { 0x55, 0x48, 0x8b, 0xec, 0x56, 0x57, 0x41, 0x56, 0x48, 0x83, 0xec, 0x08 };
        boredasf1 = new DumbHook(typeof(Projectile), "FixedUpdate", typeof(HACK), "FixedUpdate", typeof(HACK), "UpdateTrampoline", yeahhh1);
        
        //  byte[] spread111 = { 0x55, 0x48, 0x8b, 0xec, 0x56, 0x57, 0x41, 0x56, 0x48, 0x83, 0xec, 0x08 };
        //   spread1 = new DumbHook(typeof(Projectile), "DoHit", typeof(Misc), "DoHit", typeof(Misc), "DoHitTrampoline", spread111);
        //  spread1.Hook();

        byte[] yeahhh111111 = { 0x55, 0x48, 0x8b, 0xec, 0x56, 0x57, 0x41, 0x56, 0x48, 0x83, 0xec, 0x08 };
        boredasf111111 = new DumbHook(typeof(BasePlayer), "SendClientTick", typeof(HACK), "SendClientTick", typeof(HACK), "SendClientTickTrampoline", yeahhh111111);
        boredasf111111.Hook();



        if (mTex == null)
        {
            mTex = new Texture2D(1, 1);

            byte[] rawData = {
    0x89, 0x50, 0x4E, 0x47, 0x0D, 0x0A, 0x1A, 0x0A, 0x00, 0x00, 0x00, 0x0D,
    0x49, 0x48, 0x44, 0x52, 0x00, 0x00, 0x00, 0x4B, 0x00, 0x00, 0x00, 0x4B,
    0x08, 0x03, 0x00, 0x00, 0x00, 0x0F, 0x90, 0x8A, 0xD8, 0x00, 0x00, 0x01,
    0x74, 0x50, 0x4C, 0x54, 0x45, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0xFF,
    0x00, 0x00, 0xFF, 0x00, 0x00, 0xFF, 0x00, 0x00, 0xFF, 0x00, 0x00, 0xFF,
    0x00, 0x00, 0xFF, 0x00, 0x00, 0xFF, 0x00, 0x00, 0xFF, 0x00, 0x00, 0xFF,
    0x00, 0x00, 0xFF, 0x00, 0x00, 0xFF, 0x00, 0x00, 0xFF, 0x00, 0x00, 0xFF,
    0x00, 0x00, 0xFF, 0x00, 0x00, 0xFF, 0x00, 0x00, 0xFF, 0x00, 0x00, 0xFF,
    0x00, 0x00, 0xFF, 0x00, 0x00, 0xFF, 0x00, 0x00, 0xFF, 0x00, 0x00, 0xFF,
    0x00, 0x00, 0xFF, 0x00, 0x00, 0xFF, 0x00, 0x00, 0xFF, 0x00, 0x00, 0xFF,
    0x00, 0x00, 0xFF, 0x00, 0x00, 0xFF, 0x00, 0x00, 0xFF, 0x00, 0x00, 0xFF,
    0x00, 0x00, 0xFF, 0x00, 0x00, 0xFF, 0x00, 0x00, 0xFF, 0x00, 0x00, 0xFF,
    0x00, 0x00, 0xFF, 0x00, 0x00, 0xFF, 0x00, 0x00, 0xFF, 0x00, 0x00, 0xFF,
    0x00, 0x00, 0xFF, 0x00, 0x00, 0xFF, 0x00, 0x00, 0xFF, 0x00, 0x00, 0xFF,
    0x00, 0x00, 0xFF, 0x00, 0x00, 0xFF, 0x00, 0x00, 0xFF, 0x00, 0x00, 0xFF,
    0x00, 0x00, 0xFF, 0x00, 0x00, 0xFF, 0x00, 0x00, 0xFF, 0x00, 0x00, 0xFF,
    0x00, 0x00, 0xFF, 0x00, 0x00, 0xFF, 0x00, 0x00, 0xFF, 0x00, 0x00, 0xFF,
    0x00, 0x00, 0xFF, 0x00, 0x00, 0xFF, 0x00, 0x00, 0xFF, 0x00, 0x00, 0xFF,
    0x00, 0x00, 0xFF, 0x00, 0x00, 0xFF, 0x00, 0x00, 0xFF, 0x00, 0x00, 0xFF,
    0x00, 0x00, 0xFF, 0x00, 0x00, 0xFF, 0x00, 0x00, 0xFF, 0x00, 0x00, 0xFF,
    0x00, 0x00, 0xFF, 0x00, 0x00, 0xFF, 0x00, 0x00, 0xFF, 0x00, 0x00, 0xFF,
    0x00, 0x00, 0xFF, 0x00, 0x00, 0xFF, 0x00, 0x00, 0xFF, 0x00, 0x00, 0xFF,
    0x00, 0x00, 0xFF, 0x00, 0x00, 0xFF, 0x00, 0x00, 0xFF, 0x00, 0x00, 0xFF,
    0x00, 0x00, 0xFF, 0x00, 0x00, 0xFF, 0x00, 0x00, 0xFF, 0x00, 0x00, 0xFF,
    0x00, 0x00, 0xFF, 0x00, 0x00, 0xFF, 0x00, 0x00, 0xFF, 0x00, 0x00, 0xFF,
    0x00, 0x00, 0xFF, 0x00, 0x00, 0xFF, 0x00, 0x00, 0xFF, 0x00, 0x00, 0xFF,
    0x00, 0x00, 0xFF, 0x00, 0x00, 0xFF, 0x00, 0x00, 0xFF, 0x00, 0x00, 0xFF,
    0x00, 0x00, 0xFF, 0x00, 0x00, 0xFF, 0x00, 0x00, 0xFF, 0x00, 0x00, 0xFF,
    0x00, 0x00, 0xFF, 0x00, 0x00, 0xFF, 0x00, 0x00, 0xFF, 0x00, 0x00, 0xFF,
    0x00, 0x00, 0xFF, 0x00, 0x00, 0xFF, 0x00, 0x00, 0xFF, 0x00, 0x00, 0xFF,
    0x00, 0x00, 0xFF, 0x00, 0x00, 0xFF, 0x00, 0x00, 0xFF, 0x00, 0x00, 0xFF,
    0x00, 0x00, 0xFF, 0x00, 0x00, 0xFF, 0x00, 0x00, 0xFF, 0x00, 0x00, 0xFF,
    0x00, 0x00, 0xFF, 0x00, 0x00, 0xFF, 0x00, 0x00, 0xFF, 0x00, 0x00, 0xFF,
    0x00, 0x00, 0xFF, 0x00, 0x00, 0xFF, 0x00, 0x00, 0xFF, 0x00, 0x00, 0xFF,
    0x00, 0x00, 0xFF, 0x00, 0x00, 0x56, 0xFC, 0xB8, 0xAE, 0x00, 0x00, 0x00,
    0x7B, 0x74, 0x52, 0x4E, 0x53, 0x00, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A,
    0x0C, 0x0E, 0x10, 0x12, 0x14, 0x16, 0x18, 0x1A, 0x1C, 0x1E, 0x20, 0x22,
    0x24, 0x26, 0x28, 0x2A, 0x2C, 0x2E, 0x30, 0x32, 0x34, 0x36, 0x38, 0x3A,
    0x3C, 0x3E, 0x40, 0x42, 0x44, 0x46, 0x48, 0x4A, 0x4C, 0x4E, 0x50, 0x52,
    0x54, 0x56, 0x58, 0x5A, 0x5C, 0x5E, 0x60, 0x62, 0x64, 0x68, 0x6A, 0x6C,
    0x70, 0x72, 0x74, 0x76, 0x78, 0x7A, 0x7C, 0x66, 0x7E, 0x81, 0x83, 0x85,
    0x87, 0x6E, 0x89, 0x8B, 0x8D, 0x8F, 0x91, 0x93, 0x95, 0x97, 0x99, 0x9B,
    0x9D, 0x9F, 0xA1, 0xA3, 0xA5, 0xA7, 0xA9, 0xAB, 0xAD, 0xAF, 0xB1, 0xB3,
    0xB5, 0xB7, 0xBB, 0xBD, 0xBF, 0xC1, 0xC3, 0xC5, 0xC7, 0xC9, 0xCB, 0xCD,
    0xCF, 0xD1, 0xD3, 0xD5, 0xD9, 0xDB, 0xDD, 0xD7, 0xE1, 0xE3, 0xDF, 0xE7,
    0xE9, 0xE5, 0xEB, 0xED, 0xEF, 0xF3, 0xF7, 0xFB, 0x93, 0x2A, 0x29, 0x0F,
    0x00, 0x00, 0x06, 0x23, 0x49, 0x44, 0x41, 0x54, 0x58, 0x85, 0xAD, 0xD8,
    0x67, 0x57, 0x22, 0x49, 0x14, 0x06, 0xE0, 0x1E, 0x07, 0x75, 0x40, 0x90,
    0xEC, 0x10, 0x04, 0x25, 0x67, 0x90, 0x20, 0x41, 0x51, 0xC1, 0x44, 0x10,
    0x4C, 0xA8, 0x04, 0x11, 0x03, 0x12, 0x44, 0xCC, 0x6B, 0x9A, 0xFD, 0xF3,
    0x7B, 0x6F, 0x75, 0x0B, 0xA3, 0x8C, 0x3B, 0xB3, 0x67, 0xAB, 0xCE, 0x51,
    0xFC, 0xE0, 0x79, 0xCE, 0xFB, 0xDE, 0x2A, 0xA0, 0xBB, 0x99, 0x2F, 0xBF,
    0x5F, 0x43, 0xB8, 0xFE, 0xE0, 0xFF, 0x98, 0xDF, 0x28, 0x5F, 0x71, 0xF1,
    0x78, 0x3C, 0xF2, 0xFA, 0x1B, 0xF1, 0x73, 0x0B, 0x1D, 0x1E, 0x6F, 0x78,
    0x78, 0x78, 0x84, 0x5D, 0xF0, 0x17, 0x92, 0xFF, 0xE2, 0x7D, 0x66, 0x21,
    0x04, 0xCC, 0xE8, 0xE8, 0xE8, 0xB7, 0xB7, 0x05, 0x7F, 0x03, 0x88, 0xDC,
    0x7F, 0xB2, 0x86, 0x00, 0x1A, 0x19, 0x01, 0x86, 0xCF, 0x17, 0x08, 0xC6,
    0xD8, 0x25, 0x10, 0xF0, 0xF9, 0x00, 0x42, 0x40, 0xDE, 0x27, 0xDA, 0xAF,
    0x2C, 0x22, 0x8D, 0x7E, 0x43, 0x46, 0x28, 0x14, 0x89, 0x44, 0xE3, 0xB8,
    0xE0, 0x55, 0x28, 0x44, 0x10, 0xB8, 0x4F, 0xB4, 0x41, 0xAB, 0x27, 0x8D,
    0x09, 0x41, 0x11, 0x4B, 0x24, 0x12, 0x29, 0x2E, 0x78, 0x15, 0x83, 0x08,
    0xDC, 0xA7, 0xDA, 0x80, 0x35, 0xF4, 0x95, 0x48, 0x08, 0x89, 0x25, 0x52,
    0x99, 0x4C, 0x2E, 0x57, 0xB0, 0x4B, 0x2E, 0x97, 0xC9, 0xA4, 0xE0, 0x01,
    0x47, 0xB4, 0x41, 0x8C, 0xF9, 0x28, 0xF1, 0x86, 0x39, 0x09, 0x20, 0xB9,
    0x42, 0xA9, 0x9C, 0xF8, 0x0E, 0x4B, 0x85, 0xBF, 0x26, 0x94, 0x4A, 0x85,
    0x1C, 0x38, 0x4E, 0x1B, 0x8C, 0xC6, 0x7C, 0xA4, 0x46, 0x46, 0xF9, 0x02,
    0xA1, 0x08, 0x22, 0x01, 0x34, 0xF1, 0x5D, 0xA5, 0xD6, 0x68, 0xB4, 0xEC,
    0xD2, 0x68, 0xD4, 0x2A, 0xF0, 0x14, 0x72, 0x08, 0x27, 0x12, 0x0A, 0xF8,
    0xA3, 0x23, 0x1F, 0x31, 0xE6, 0x3D, 0x35, 0x3C, 0x02, 0xA1, 0x30, 0x93,
    0x5C, 0x81, 0x90, 0x76, 0x72, 0x52, 0xA7, 0xD7, 0x4F, 0xE1, 0xD2, 0xEB,
    0x75, 0x93, 0x93, 0x5A, 0xE4, 0x50, 0x1B, 0x17, 0x41, 0xB4, 0x8F, 0x3D,
    0x99, 0xF7, 0xD4, 0xE8, 0x37, 0x0C, 0x25, 0x95, 0x81, 0xA4, 0xD6, 0x80,
    0x33, 0x35, 0x6D, 0x30, 0x18, 0x8D, 0x26, 0x93, 0xC9, 0x68, 0x34, 0x18,
    0xA6, 0xA7, 0xC0, 0xD3, 0xA8, 0x41, 0x93, 0x49, 0x31, 0x1A, 0xF4, 0x7C,
    0x87, 0x31, 0x03, 0xD4, 0xB8, 0x44, 0x26, 0x57, 0xA2, 0x04, 0x90, 0xD1,
    0x64, 0xB6, 0x58, 0xAC, 0x56, 0xAB, 0x0D, 0x7E, 0x2C, 0x16, 0xB3, 0xC9,
    0x08, 0x1C, 0x6A, 0x4A, 0xB9, 0x4C, 0x32, 0x3E, 0x80, 0x31, 0xBF, 0xA0,
    0x14, 0x13, 0x2A, 0x94, 0x0C, 0x00, 0xD9, 0xEC, 0x76, 0x87, 0xD3, 0xE9,
    0x74, 0xC1, 0x8F, 0xC3, 0x6E, 0xB7, 0x01, 0x67, 0x40, 0x4D, 0x05, 0xD1,
    0x06, 0x31, 0x66, 0x80, 0xC2, 0x50, 0x5A, 0x1D, 0x48, 0x16, 0x2B, 0x38,
    0x2E, 0xB7, 0xC7, 0xEB, 0xF5, 0xF9, 0x7C, 0x5E, 0xAF, 0xC7, 0xED, 0x02,
    0xCF, 0x6A, 0x01, 0x4D, 0xA7, 0xC5, 0x68, 0x03, 0x58, 0xCF, 0x82, 0x1D,
    0x44, 0x4A, 0x0A, 0x14, 0x84, 0x9A, 0x36, 0x9A, 0xAD, 0x76, 0xA7, 0xCB,
    0xE3, 0xF5, 0xCD, 0xF8, 0x03, 0x81, 0x60, 0x30, 0x18, 0x08, 0xF8, 0x67,
    0x7C, 0x5E, 0x8F, 0xCB, 0x69, 0xB7, 0x9A, 0x8D, 0xD3, 0x10, 0x0D, 0x30,
    0x29, 0x62, 0xB0, 0x9B, 0x1F, 0xAD, 0x21, 0x96, 0x82, 0x54, 0xD0, 0x0F,
    0x42, 0x81, 0xE4, 0xF6, 0xFA, 0xFC, 0x81, 0x60, 0x28, 0x34, 0x1B, 0xC6,
    0x35, 0x1B, 0x0A, 0x05, 0x03, 0x7E, 0x9F, 0xD7, 0x0D, 0x1A, 0x44, 0x83,
    0x9E, 0x5C, 0xB2, 0x11, 0xDE, 0xD0, 0x7B, 0x0B, 0x1B, 0xF2, 0x39, 0x4A,
    0x37, 0x65, 0x34, 0xDB, 0x1C, 0x2E, 0x8F, 0xCF, 0x1F, 0x04, 0x27, 0x12,
    0x8D, 0xC6, 0x70, 0x45, 0xA3, 0x11, 0xF0, 0x82, 0x7E, 0x9F, 0xC7, 0xE5,
    0xB0, 0x99, 0x8D, 0x53, 0x3A, 0x0E, 0xE3, 0xF7, 0x5B, 0x72, 0x16, 0x52,
    0x63, 0x22, 0x89, 0x0C, 0x0A, 0x02, 0x65, 0xB1, 0x39, 0xDD, 0x28, 0x01,
    0x34, 0x37, 0x1F, 0x8F, 0x2F, 0xE0, 0x8A, 0xC7, 0xE7, 0xE7, 0x80, 0x43,
    0xCD, 0xED, 0xB4, 0x59, 0x10, 0xFB, 0xAE, 0x94, 0x49, 0xE0, 0x9C, 0x01,
    0xF6, 0xB3, 0x45, 0x1A, 0x8A, 0xC4, 0x32, 0x05, 0xCC, 0x8A, 0x50, 0x1E,
    0x5F, 0x60, 0x31, 0x1C, 0x89, 0xCD, 0xC5, 0x97, 0x12, 0xC9, 0xE5, 0xE5,
    0x95, 0x95, 0x95, 0xE5, 0xE5, 0x64, 0x62, 0x29, 0x3E, 0x17, 0x8B, 0x84,
    0x17, 0x03, 0x3E, 0x0F, 0xC1, 0x60, 0x66, 0x0A, 0x99, 0x58, 0xD4, 0x6F,
    0xC9, 0xF4, 0x62, 0xE1, 0xDC, 0x27, 0xD4, 0x1C, 0x35, 0x13, 0x0C, 0xAD,
    0x46, 0x41, 0x4A, 0xAE, 0xAC, 0xAD, 0xA7, 0x52, 0xE9, 0x74, 0x3A, 0x95,
    0x5A, 0x5F, 0x5B, 0x49, 0x82, 0x16, 0x5D, 0x0D, 0x05, 0x67, 0x38, 0x4C,
    0x3D, 0x81, 0xF3, 0xEF, 0x05, 0x63, 0xDE, 0x62, 0x91, 0x86, 0x2A, 0xAD,
    0xDE, 0x60, 0x26, 0xD4, 0x6C, 0x24, 0x86, 0xD2, 0x7A, 0x3A, 0x93, 0xDD,
    0xC8, 0xE1, 0xDA, 0xC8, 0x66, 0xD2, 0xEB, 0xA8, 0xC5, 0x22, 0xB3, 0x04,
    0x33, 0x1B, 0xF4, 0x5A, 0x15, 0x69, 0xF9, 0x16, 0x8C, 0xE9, 0xC5, 0x12,
    0x4B, 0xA1, 0xA1, 0x6E, 0xDA, 0xC4, 0x51, 0x73, 0x0B, 0x09, 0x90, 0xB2,
    0xB9, 0xFC, 0xE6, 0xD6, 0x36, 0xAE, 0xAD, 0xCD, 0x7C, 0x2E, 0x0B, 0x5A,
    0x62, 0x61, 0x8E, 0xC3, 0x4C, 0xD3, 0x30, 0x32, 0x85, 0x54, 0xDC, 0x0B,
    0xC6, 0xF4, 0x63, 0xB1, 0x0D, 0xAD, 0x0E, 0xB7, 0x8F, 0x50, 0xC9, 0xB5,
    0x54, 0x26, 0xB7, 0xB9, 0xB5, 0xB3, 0x5B, 0xD8, 0xC3, 0x55, 0xD8, 0xDD,
    0xD9, 0xDA, 0xCC, 0x65, 0x52, 0x6B, 0x49, 0x82, 0xF9, 0xDC, 0x0E, 0x2B,
    0xDB, 0xB2, 0x1F, 0x8C, 0xE9, 0x4F, 0x0B, 0x62, 0x41, 0x43, 0xBB, 0xCB,
    0x17, 0x08, 0x11, 0x2A, 0x9D, 0xCD, 0x6F, 0xED, 0x14, 0xF6, 0x0F, 0x8A,
    0xA5, 0x52, 0xB9, 0x54, 0x2A, 0x1E, 0xEC, 0x17, 0x76, 0xB6, 0xF2, 0xD9,
    0x34, 0xC1, 0x42, 0x01, 0x9F, 0xCB, 0x0E, 0x2D, 0x31, 0x58, 0x6F, 0x62,
    0x0C, 0x9E, 0x2D, 0xDC, 0x44, 0x36, 0x96, 0xC9, 0xEA, 0xF4, 0xF8, 0x17,
    0x57, 0x63, 0x48, 0x6D, 0x6C, 0x6E, 0x17, 0xF6, 0x8B, 0xE5, 0xCA, 0x61,
    0x15, 0xD7, 0x61, 0xA5, 0x5C, 0xDC, 0x2F, 0x6C, 0x6F, 0x6E, 0x20, 0x16,
    0x5B, 0x5D, 0xF4, 0x7B, 0x9C, 0x56, 0x13, 0x17, 0x0C, 0xB6, 0x12, 0xCF,
    0x18, 0x43, 0x2A, 0xF2, 0xC7, 0xB8, 0x58, 0x16, 0x3B, 0x34, 0x0C, 0x47,
    0xE3, 0x09, 0xA4, 0x76, 0xF6, 0x0E, 0x4A, 0x95, 0xEA, 0x51, 0xED, 0x18,
    0x57, 0xED, 0xA8, 0x5A, 0x29, 0x1D, 0xEC, 0xED, 0x20, 0x96, 0x88, 0x47,
    0xC3, 0xD0, 0xD2, 0x6E, 0xE1, 0x82, 0x8D, 0xF1, 0x49, 0x49, 0x86, 0x54,
    0x14, 0x08, 0xC5, 0xB0, 0x89, 0x24, 0x96, 0xD7, 0x0F, 0x0D, 0x97, 0x56,
    0x52, 0x59, 0xA0, 0x8A, 0xE5, 0xEA, 0xD1, 0xF1, 0xC9, 0xE9, 0x59, 0xBD,
    0x5E, 0x3F, 0x3B, 0x3D, 0x39, 0x3E, 0xAA, 0x96, 0x8B, 0x80, 0x65, 0x53,
    0x2B, 0x4B, 0xD0, 0xD2, 0xEF, 0x25, 0xC1, 0x60, 0x2B, 0xC5, 0x42, 0x01,
    0x29, 0x49, 0x2C, 0xAE, 0xA2, 0x6E, 0x1A, 0xA7, 0x15, 0x0C, 0xC7, 0xE2,
    0xC9, 0xF5, 0x4C, 0x7E, 0x7B, 0xAF, 0x58, 0xA9, 0xD6, 0x4E, 0xCE, 0xCE,
    0x1B, 0xCD, 0x56, 0xAB, 0xD5, 0x6C, 0x9C, 0x9F, 0x9D, 0xD4, 0xAA, 0x95,
    0xE2, 0xDE, 0x76, 0x3E, 0xB3, 0x9E, 0x8C, 0xC7, 0x20, 0x18, 0x4C, 0x6C,
    0x5A, 0xC7, 0x95, 0x64, 0x2D, 0xB2, 0x8B, 0x58, 0x51, 0xAB, 0x37, 0x5A,
    0x1C, 0x1E, 0x36, 0x56, 0x3A, 0xB7, 0x55, 0x38, 0x28, 0x57, 0x6B, 0xA7,
    0xF5, 0x46, 0xAB, 0x7D, 0xD1, 0xE9, 0x74, 0x2E, 0xDA, 0xAD, 0x46, 0xFD,
    0xB4, 0x56, 0x2D, 0x1F, 0x14, 0xB6, 0x72, 0x69, 0x36, 0x98, 0xC7, 0x61,
    0x31, 0xEA, 0xB5, 0xA4, 0x24, 0xD9, 0x49, 0xB4, 0x70, 0x17, 0xD9, 0x8A,
    0x36, 0xA7, 0x37, 0x30, 0x1B, 0x85, 0x58, 0xD0, 0x70, 0xBF, 0x84, 0x54,
    0xB3, 0xDD, 0xB9, 0xEC, 0x76, 0xAF, 0xBA, 0xDD, 0xCB, 0x4E, 0xBB, 0x89,
    0x58, 0x69, 0x1F, 0x5A, 0x42, 0xB0, 0xE8, 0x6C, 0xC0, 0x0B, 0x67, 0x8C,
    0x94, 0xC4, 0x9D, 0x24, 0x16, 0x7B, 0x50, 0x65, 0x4A, 0xF5, 0x24, 0x57,
    0x91, 0x8B, 0x55, 0xAC, 0x1C, 0x9D, 0xD4, 0x9B, 0x17, 0xD7, 0xDD, 0xAB,
    0x9B, 0x9B, 0xDB, 0x9B, 0x9B, 0xAB, 0xEE, 0xF5, 0x45, 0xB3, 0x7E, 0x72,
    0x54, 0x29, 0x72, 0xC1, 0xB8, 0x92, 0x93, 0x6A, 0x1C, 0x18, 0x39, 0x15,
    0xC4, 0x22, 0xE3, 0xD2, 0xE8, 0x70, 0x17, 0x67, 0x42, 0x91, 0xF9, 0xC4,
    0x5A, 0x26, 0xBF, 0xB3, 0x5F, 0xAE, 0x1E, 0x9F, 0x35, 0xDA, 0xD7, 0xDD,
    0xBB, 0xDB, 0xFB, 0xFB, 0x87, 0xFB, 0xFB, 0xDB, 0xBB, 0xEE, 0x75, 0xBB,
    0x71, 0x76, 0x5C, 0x2D, 0xEF, 0xEF, 0xE4, 0x33, 0x6B, 0x89, 0xF9, 0x48,
    0x68, 0x06, 0x77, 0x52, 0xA7, 0x21, 0x03, 0x7B, 0xB3, 0xC8, 0xE8, 0xC9,
    0x89, 0xC0, 0x71, 0xB1, 0x15, 0x77, 0x0F, 0x20, 0xD6, 0x79, 0xAB, 0xD3,
    0xBD, 0xFB, 0xEB, 0xE1, 0xF1, 0xE9, 0xE9, 0xE9, 0xF1, 0xE1, 0xAF, 0xBB,
    0x6E, 0xA7, 0x75, 0x0E, 0xC1, 0x0E, 0x76, 0xD9, 0x92, 0x64, 0x60, 0x78,
    0x2A, 0xDE, 0x86, 0x0F, 0x16, 0x79, 0x03, 0x91, 0xD1, 0x5B, 0xD9, 0x71,
    0x2D, 0xA7, 0x36, 0xA0, 0xE2, 0x61, 0xED, 0xB4, 0xD1, 0xBE, 0xBC, 0xBA,
    0x7D, 0x78, 0x7A, 0x7E, 0x79, 0x79, 0x79, 0x7E, 0x7A, 0xB8, 0xBD, 0xBA,
    0x6C, 0x37, 0x4E, 0x6B, 0x87, 0x50, 0x72, 0x23, 0xB5, 0xCC, 0x0E, 0xCC,
    0x4A, 0x86, 0x4F, 0xDE, 0x46, 0x60, 0xE1, 0xA9, 0x67, 0xB7, 0x71, 0x8A,
    0x58, 0xE1, 0xD8, 0xC2, 0x72, 0x2A, 0xB7, 0xBD, 0x57, 0x82, 0x8A, 0xCD,
    0x8B, 0xEE, 0xCD, 0xFD, 0xE3, 0xF3, 0xCB, 0xEB, 0xEB, 0xEB, 0xCB, 0xF3,
    0xE3, 0xFD, 0x4D, 0xF7, 0xA2, 0x09, 0x25, 0x4B, 0x7B, 0xDB, 0xB9, 0xD4,
    0xF2, 0x42, 0x2C, 0x4C, 0xAC, 0xA9, 0xB7, 0x8D, 0xFC, 0x3A, 0xC4, 0xF4,
    0x8F, 0x04, 0x9E, 0x54, 0x3C, 0x5D, 0x0B, 0x30, 0x7A, 0x62, 0xD5, 0xA1,
    0xE2, 0xCD, 0xFD, 0xD3, 0xCB, 0xEB, 0x8F, 0x1F, 0x3F, 0x5E, 0x5F, 0x9E,
    0xC0, 0xEA, 0xB4, 0xEA, 0xAC, 0x95, 0x5E, 0x59, 0xC0, 0x13, 0x86, 0xA7,
    0xB5, 0x7F, 0x28, 0x7A, 0x96, 0x0A, 0x2C, 0x9B, 0xAB, 0x6F, 0x95, 0x89,
    0x85, 0x15, 0xC1, 0xFA, 0x1B, 0x2D, 0x28, 0x49, 0xAC, 0x72, 0xDF, 0x72,
    0xC1, 0xA1, 0xD0, 0xAA, 0x06, 0x2C, 0x2A, 0xB9, 0x28, 0xCE, 0x8B, 0xE6,
    0x3E, 0xD2, 0x3D, 0x5F, 0x54, 0xCF, 0x3D, 0xBD, 0xF7, 0x23, 0xCD, 0xCF,
    0x09, 0x9A, 0x9F, 0x5F, 0x34, 0x3F, 0x57, 0xA9, 0x7E, 0xDE, 0xD3, 0xFC,
    0x1E, 0xA2, 0xF9, 0xFD, 0x48, 0xF3, 0x7B, 0x9B, 0xEA, 0xF5, 0x04, 0xCD,
    0xEB, 0x1C, 0xAA, 0xD7, 0x5F, 0x34, 0xAF, 0x0B, 0xA9, 0x5E, 0xAF, 0xD2,
    0xBC, 0x8E, 0xA6, 0x7A, 0x7D, 0x4F, 0xF3, 0xBE, 0x83, 0xEA, 0xFD, 0x10,
    0xD5, 0xFB, 0x34, 0x9A, 0xF7, 0x8F, 0x54, 0xEF, 0x6B, 0xA9, 0xDE, 0x6F,
    0x53, 0x7D, 0x0E, 0x40, 0xF5, 0xF9, 0x04, 0xD5, 0xE7, 0x26, 0x5F, 0x68,
    0x3E, 0xCF, 0xF9, 0x42, 0xF5, 0x39, 0xD3, 0xCF, 0xDA, 0xFF, 0x7E, 0xFE,
    0xD5, 0xD3, 0xA8, 0x3C, 0x97, 0x63, 0x35, 0x5A, 0xCF, 0x0B, 0x89, 0x46,
    0xED, 0x39, 0x66, 0xDF, 0xA3, 0xF1, 0x7C, 0xF5, 0x67, 0xF1, 0xCF, 0x9E,
    0xFB, 0xFE, 0x03, 0x69, 0xDA, 0xC6, 0xAE, 0xB6, 0x8F, 0xD5, 0xAC, 0x00,
    0x00, 0x00, 0x00, 0x49, 0x45, 0x4E, 0x44, 0xAE, 0x42, 0x60, 0x82
};

            mTex.LoadImage(rawData);
        }
      
    }
    DumbHook drawImg;
   

    public static PlayerWalkMovement movement1;
  
    internal void SendClientTick(PlayerTick tick)
    {
        System.Random rand = new System.Random();


        tick.inputState = gameObject.GetComponent<BasePlayer>().input.state.current;
        tick.position = base.transform.position;
        tick.eyePos = gameObject.GetComponent<BasePlayer>().eyes.position;
        if (menu.spin)
        {

            menu.hh += menu.sped;
            if (menu.hh > 360f)
            {
                menu.hh = 0f;
            }

            tick.inputState.aimAngles = new Vector3(menu.hhh, menu.hh, 0);

        }
        if (tick.modelState == null)
        {
            tick.modelState = new ModelState();
        }
        gameObject.GetComponent<BasePlayer>().modelState.CopyTo(tick.modelState);
        if (Network.Net.cl.write.Start())
        {
            Network.Net.cl.write.PacketID(Network.Message.Type.Tick);
            tick.WriteToStreamDelta(Network.Net.cl.write, gameObject.GetComponent<BasePlayer>().lastSentTick);
            Network.Net.cl.write.Send(new Network.SendInfo(true)
            {
                priority = Network.Priority.Immediate
            });
        }
        gameObject.GetComponent<BasePlayer>().lastSentTick = tick.Copy();
    }

    internal void SendClientTickTrampoline(PlayerTick tick)
    {
        int a = 12;
        int b = 9;
        int c = 12 * 9 - 4;
        int d = c * a - 15;
        int e = d + a;
        int f = b + c;
        a = b + 12;
        b = c - 4;
        d = a + b;
        e = a + c + d;
    }


    private bool CanJump()
    {
        return true;
    }

    private bool CanJumpTrampoline()
    {
        int num = 12;
        int num2 = 9;
        int num3 = 104;
        int num4 = num3 * num - 15;
        int num5 = num4 + num;
        int num6 = num2 + num3;
        num = num2 + 12;
        num2 = num3 - 4;
        num4 = num + num2;
        num5 = num + num3 + num4;
        return true;
    }
    public void SetNetworkPositionTrampoline(Vector3 vPos)
    {
        int a = 12;
        int b = 9;
        int c = 12 * 9 - 4;
        int d = c * a - 15;
        int e = d + a;
        int f = b + c;
        a = b + 12;
        b = c - 4;
        d = a + b;
        e = a + c + d;
    }
    public virtual bool CanHoldItems()
    {
        return true;
    }
    public virtual bool CanHoldItemsTrampoline()
    {
        int a = 12;
        int b = 9;
        int c = 12 * 9 - 4;
        int d = c * a - 15;
        int e = d + a;
        int f = b + c;
        a = b + 12;
        b = c - 4;
        d = a + b;
        e = a + c + d;
        return true;
    }
    public bool CanAttackTrampoline()
    {
        int a = 12;
        int b = 9;
        int c = 12 * 9 - 4;
        int d = c * a - 15;
        int e = d + a;
        int f = b + c;
        a = b + 12;
        b = c - 4;
        d = a + b;
        e = a + c + d;
        return false;
    }
    public bool CanAttack()
    {
        return true;
    }
   
  
    public static float GetAimCone()
    {
        return 0f;
    }
    public static float GetAimConeTrampoline()
    {
        int a = 12;
        int b = 9;
        int c = 12 * 9 - 4;
        int d = c * a - 15;
        int e = d + a;
        int f = b + c;
        a = b + 12;
        b = c - 4;
        d = a + b;
        e = a + c + d;
        return 0f;
    }
    public float GetSpeed(float running, float ducking)
    {
        return speedhackspeed;
    }

    public float GetSpeedTrampoline(float running, float ducking)
    {
        //trash code
        int num = 12;
        int num2 = 9;
        int num3 = 104;
        int num4 = num3 * num - 15;
        int num5 = num4 + num;
        int num6 = num2 + num3;
        num = num2 + 12;
        num2 = num3 - 4;
        num4 = num + num2;
        num5 = num + num3 + num4;
        return 0f; //arbitrary return value
    }
    public static float speedhackspeed = 6f;

    private Projectile CreateProjectileTrampoline(string prefabPath, Vector3 pos, Vector3 foward, Vector3 velocity)
    {
        int a = 12;
        int b = 9;
        int c = 12 * 9 - 4;
        int d = c * a - 15;
        int e = d + a;
        int f = b + c;
        a = b + 12;
        b = c - 4;
        d = a + b;
        e = a + c + d;
        return new Projectile();
    }
    private Projectile CreateProjectile(string prefabPath, Vector3 pos, Vector3 forward, Vector3 velocity)
    {
        GameObject gameObject = GameManager.client.CreatePrefab(prefabPath, pos, Quaternion.LookRotation(forward), true);
        if (gameObject == null)
        {
            return null;
        }
        Projectile component = gameObject.GetComponent<Projectile>();

        BaseProjectile bp = LocalPlayer.Entity.GetHeldEntity().GetComponent<BaseProjectile>();
        if (BaseEntityEx.IsValid(bp))
        {
           ItemDefinition bp1 = bp.primaryMagazine.ammoType;
            if (bp1 != null)
            {
                ItemModProjectile test = bp1.GetComponent<ItemModProjectile>();
                if (test != null)
                {
                    if (CFG.Aimbot.cdddeee)
                    {
                        test.projectileSpread = 0f;
                    }
                }
            }
        }
    
 
        if (CFG.Aimbot.vcgrrrr)
        {
            component.gravityModifier = 0f;
        }
        if (CFG.Aimbot.sdfewewdff)
        {
            component.thickness = 100f;
        }
        component.ricochetChance = 0f;
        Projectile.Modifier fastasfuckboi = Projectile.Modifier.Default;
        component.InitializeVelocity(velocity);
        component.modifier = fastasfuckboi;
        return component;
    }

    public float GetIndexedSpreadScalar(int shotIndex, int maxShots)
    {
        float time;
        if (shotIndex != 0)
        {
            float num = 0f / (float)maxShots;
            time = (float)shotIndex * num;
        }
        else
        {
            time = UnityEngine.Random.Range(0f, 0f);
        }
        return 0f;
    }
    public float GetProjectileSpeed()
    {

        if (localplayer.GetHeldEntity() == null)
        {
            return 375f;
        }


        int itemID = (int)localplayer.GetHeldEntity().GetOwnerItemDefinition().itemid;
        float speed = 300f;

        switch (itemID)
        {
            case -1461508848:
                speed = 375f;
                break;
            case -1716193401:
                speed = 375f;
                break;
            case 193190034:
                speed = 375f;
                break;
            case -55660037:

                break;
            case 109552593:
                speed = 240f;
                break;
            case -2094080303:
                speed = 240f;
                break;
            case 2033918259:
                speed = 300f;
                break;
            case 371156815:
                speed = 300f;
                break;
            case -930579334:
                speed = 300f;
                break;
            case -1745053053:
                speed = 375f;
                break;
            case 548699316:
                speed = 300f;
                break;
            case 456448245:
                speed = 300f;
                break;
            case -853695669:
                speed = 59f;
                break;
            case 2123300234:
                speed = 59f;
                break;
        }

        if (localplayer.GetHeldEntity().GetComponent<BaseProjectile>().IsSilenced())
            speed = speed * 0.745f;

        return speed;
    }

    public float GetIndexedSpreadScalarTrampoline(int shotIndex, int maxShots)
    {
        int a = 12;
        int b = 9;
        int c = 12 * 9 - 4;
        int d = c * a - 15;
        int e = d + a;
        int f = b + c;
        a = b + 12;
        b = c - 4;
        d = a + b;
        e = a + c + d;
        return 0f;
    }

   
    public static void debugcamera()
    {
        if (SingletonComponent<CameraMan>.Instance == null)
        {
            GameManager.client.CreatePrefab("assets/bundled/prefabs/system/debug/debug_camera.prefab", default(Vector3), default(Quaternion), true);
        }
        else
        {
            SingletonComponent<CameraMan>.Instance.enabled ^= true;
        }
        
    }
    public static void debugcameraTrampoline()
    {
        int a = 12;
        int b = 9;
        int c = 12 * 9 - 4;
        int d = c * a - 15;
        int e = d + a;
        int f = b + c;
        a = b + 12;
        b = c - 4;
        d = a + b;
        e = a + c + d;
    }
    public virtual bool CanAim()
    {
        return true;
    }
    public virtual bool CanAimTrampoline()
    {
        int a = 12;
        int b = 9;
        int c = 12 * 9 - 4;
        int d = c * a - 15;
        int e = d + a;
        int f = b + c;
        a = b + 12;
        b = c - 4;
        d = a + b;
        e = a + c + d;
        return true;
    }
    private bool CanSprint()
    {
        return true;
    }
    private bool CanSprintTrampoline()
    {
        int a = 12;
        int b = 9;
        int c = 12 * 9 - 4;
        int d = c * a - 15;
        int e = d + a;
        int f = b + c;
        a = b + 12;
        b = c - 4;
        d = a + b;
        e = a + c + d;
        return true;
    }





    
   
   


    public BaseNetworkable net;
    public const String faked = "Alistair";
    public const UInt64 SteamID_FakeNumber = 5783583285;
    DumbHook jump;
    DumbHook updateee;
    DumbHook canAttack;
    DumbHook instantloot;
    DumbHook hahyea;
    DumbHook nofall;
    DumbHook aimcone;
    DumbHook ggdsfdf;
    DumbHook projshit;
    DumbHook proj;
    DumbHook shotgunspread1;
    DumbHook seeinv;
    DumbHook resetter;
    DumbHook holditems;
    DumbHook debug;
    DumbHook canaim;
    DumbHook canaim1;
    DumbHook build;
    DumbHook spread1;
    DumbHook namespoof;

    private IEnumerator gravityandwalk()
    {
        float oldshit = 0f;
        float oldshit1 = 0f;
        {
            while (true)
            {
                try
                {
                    {
                        if (CFG.Misc.HGHGH)
                        {
                            if (oldshit1 == 0f)
                                oldshit1 = HACK.localplayer.movement.GetComponent<PlayerWalkMovement>().gravityMultiplier;
                            HACK.localplayer.movement.GetComponent<PlayerWalkMovement>().gravityMultiplier = oldshit1 / 2f;
                        }
                        else
                        {
                            if (oldshit1 != 0f)
                                HACK.localplayer.movement.GetComponent<PlayerWalkMovement>().gravityMultiplier = oldshit1;
                        }
                        if (UnityEngine.Input.GetKey(KeyCode.C) && CFG.Misc.walkon)
                        {

                            HACK.localplayer.movement.GetComponent<PlayerWalkMovement>().SetPrivateField("flying", true);
                            if (oldshit == 0f)
                                oldshit = HACK.localplayer.movement.GetComponent<PlayerWalkMovement>().gravityMultiplier;
                            HACK.localplayer.movement.GetComponent<PlayerWalkMovement>().gravityMultiplier = 0f;

                        }
                        else
                        {
                            if (oldshit != 0f)
                                HACK.localplayer.movement.GetComponent<PlayerWalkMovement>().gravityMultiplier = oldshit;
                        }
                       
                        if (CFG.Misc.ahahahha)
                        {
                            Vector2 centerScreen = new Vector2(Screen.width / 2f, Screen.height / 2f);
                            foreach (BasePlayer player in BasePlayer.visiblePlayerList)
                            {

                                if (player != null && !player.IsSleeping() && !player.IsDead())
                                {
                                    int distanceFromCenter = (int)(Vector2.Distance(MainCamera.mainCamera.WorldToScreenPoint(player.model.headBone.transform.position), centerScreen));
                                    Vector3 onScreen = player.transform.position - MainCamera.mainCamera.transform.position;
                                    if (!player.IsLocalPlayer() && player.health > 0f && Vector3.Dot(MainCamera.mainCamera.transform.TransformDirection(Vector3.forward), onScreen) > 0)
                                        ;
                                }


                                int dist = (int)Vector3.Distance(LocalPlayer.Entity.transform.position, player.transform.position);
                                Vector3 screenPos = Players.GetScreenPos(player.transform.position);
                                if (screenPos.z > 0f && player != null && !player.IsDead() && !player.IsSleeping() && dist <= player1 && UnityEngine.Input.GetKey(KeyCode.X))
                                {
                                    bool niggeribtch = false;
                                    uint uiEntityId = 0;
                                    Vector3 targetpos = LocalPlayer.Entity.transform.position = player.transform.position + new Vector3(0f, teleportheight, 0f);
                                    LocalPlayer.Entity.ServerRPC("RPC_StartClimb", niggeribtch, targetpos, uiEntityId,null,null);
                                }
                            }
                        }
                    }
                }
                catch
                {
                }
                yield return new WaitForSeconds(0f);
            }
        }
    }
    public static float player1;
    public static float teleportheight;
    public void SendProjectileAttackTrampoline(PlayerProjectileAttack attack)
    {
        int a = 12;
        int b = 9;
        int c = 12 * 9 - 4;
        int d = c * a - 15;
        int e = d + a;
        int f = b + c;
        a = b + 12;
        b = c - 4;
        d = a + b;
        e = a + c + d;

    }
   
    public static void OnConsoleCommandfromServer(Message packet)
    {
        string text = packet.read.String();
        bool flag = text.Length >= 6;
        if (flag)
        {
            text.StartsWith("noclip");
        }
        else
        {
            packet.read.Position = 1L;
        }
    }
    public static BasePlayer getbaseplayertest()
    {
        BasePlayer result = null;
        Vector2 vector = new Vector2((float)Screen.width / 2f, (float)Screen.height / 2f);
        float num = 10000f;
        foreach (BasePlayer basePlayer in BasePlayer.visiblePlayerList)
        {
            if (!(basePlayer == null) && !basePlayer.IsLocalPlayer() && basePlayer.health > 0f && !basePlayer.IsDead() && !basePlayer.IsDead())
            {
                Vector3 vector2 = MainCamera.mainCamera.WorldToScreenPoint(basePlayer.transform.position);
                Vector2 vector3 = new Vector2(vector2.x, (float)Screen.height - vector2.y);
                float num2 = Mathf.Abs(Vector2.Distance(new Vector2((float)(Screen.width / 2), (float)(Screen.height / 2)), new Vector2(vector2.x, (float)Screen.height - vector2.y)));
                if (num2 <= menu.fov1 && num2 < num && basePlayer.IsAlive())
                {
                    num = num2;
                    result = basePlayer;
                }
            }
        }
        return result;
    }
    public static Vector3 target()
    {
        Vector3 result = Vector3.zero;
        Vector2 vector = new Vector2((float)(Screen.width / 2), (float)(Screen.height / 2));
        float num = 7000f;
        foreach (BasePlayer basePlayer in BasePlayer.visiblePlayerList)
        {
            if (!friend.friendsList.Contains(basePlayer.userID) && basePlayer != null && !basePlayer.IsLocalPlayer() && basePlayer.health > 0f && !basePlayer.IsDead())
            {
                Vector3 positionBone;
                if (CFG.Aimbot.bbccvvdd)
                {
                    positionBone = basePlayer.model.rootBone.transform.position ;
                }
                else
                {
                    positionBone = basePlayer.model.headBone.transform.position + new Vector3(0f, 0.05f, 0f);
                }
                if (!(positionBone == Vector3.zero))
                {
                    Vector3 vector2 = MainCamera.mainCamera.WorldToScreenPoint(positionBone);
                    if (vector2.z > 0f)
                    {
                        Vector2 vector3 = new Vector2(vector2.x, (float)Screen.height - vector2.y);
                        float num2 = Mathf.Abs(Vector2.Distance(vector, vector3));
                        if (num2 <= menu.fov1 && num2 <= num)
                        {
                            result = positionBone;
                            num = num2;
                        }
                    }
                }
            }
        }
        return result;
    }
    public static Vector3 giva()
    {
        Vector3 result = Vector3.zero;
        Vector2 vector = new Vector2((float)(Screen.width / 2), (float)(Screen.height / 2));
        float num = 7000f;
        foreach (BaseNPC b in companent.ani)

            if (b != null && b.health > 0f)
            {
                Vector3 positionBone;

                positionBone = b.FindBone("head").position;

                if (!(positionBone == Vector3.zero))
                {
                    Vector3 vector2 = MainCamera.mainCamera.WorldToScreenPoint(positionBone);
                    if (vector2.z > 0f)
                    {
                        Vector2 vector3 = new Vector2(vector2.x, (float)Screen.height - vector2.y);
                        float num2 = Mathf.Abs(Vector2.Distance(vector, vector3));
                        if (num2 <= 720 && num2 <= num)
                        {
                            result = positionBone;
                            num = num2;
                        }
                    }
                }

            }
        return result;
    }
   
    public static Vector3 targetheli()
    {
        Vector3 result = Vector3.zero;
        Vector2 vector = new Vector2((float)(Screen.width / 2), (float)(Screen.height / 2));
        float num = 9999f;
        foreach (BaseHelicopter b in companent.heli1)
            if (b != null && b.health > 0f)
            {
                Vector3 positionBone = b.mainRotor.transform.position;



                if (b.health > 5000)
                {
                    positionBone = b.mainRotor.transform.position;
                }
                else
                {
                    positionBone = b.tailRotor.transform.position;
                }
                result = positionBone;
            }
        return result;
    }
    private void FixedUpdate()
    {
        Projectile projectile = gameObject.GetComponent<Projectile>();


        if (projectile != null)
        {

            projectile.UpdateVelocity(UnityEngine.Time.fixedDeltaTime);
            if (CFG.Misc.cahh || CFG.Aimbot.qewqefdsf || CFG.Aimbot.BulletDropPrediction || CFG.Aimbot.dffs)
            {
                HeldEntity HeldShits = LocalPlayer.Entity.GetHeldEntity();

                if (BaseEntityEx.IsValid(HeldShits))
                {
                    if (HeldShits is BaseMelee)
                    {
                        BaseMelee basemelee = LocalPlayer.Entity.GetHeldEntity().GetComponent<BaseMelee>();

                        if (BaseEntityEx.IsValid(basemelee))
                        {
                            Item item = basemelee.GetItem();

                            if (item != null)
                            {
                                ItemModProjectile itemmodproj = item.info.GetComponent<ItemModProjectile>();
                                if (itemmodproj != null)
                                {
                                    bool flag = UnityEngine.Input.GetKey(KeyCode.F) && CFG.Aimbot.dffs;
                                    if (flag)
                                    {
                                        if (LocalPlayer.Entity != null)
                                        {
                                            BasePlayer result = null;
                                            Vector2 vector = new Vector2((float)(Screen.width / 2), (float)(Screen.height / 2));
                                            float num = 7000f;
                                            foreach (BasePlayer basePlayer in BasePlayer.visiblePlayerList)
                                            {
                                                if (basePlayer != null && !basePlayer.IsLocalPlayer() && !basePlayer.IsDead())
                                                {

                                                    Vector3 positionBone;
                                                    if (menu.ф)
                                                    {
                                                        positionBone = basePlayer.model.rootBone.transform.position;
                                                    }
                                                    else
                                                    {
                                                        positionBone = basePlayer.model.headBone.transform.position + new Vector3(0f, 0.05f, 0f);
                                                    }
                                                    if (!(positionBone == Vector3.zero))
                                                    {
                                                        Vector3 vector2 = MainCamera.mainCamera.WorldToScreenPoint(positionBone);
                                                        if (vector2.z > 0f)
                                                        {
                                                            Vector2 vector3 = new Vector2(vector2.x, (float)Screen.height - vector2.y);
                                                            float num2 = Mathf.Abs(Vector2.Distance(vector, vector3));
                                                            if (num2 <= menu.fov1 && num2 < num)
                                                            {
                                                                num = num2;
                                                                result = basePlayer;
                                                            }
                                                        }
                                                    }

                                                }
                                            }
                                            if (result != null && result.IsAlive() && !result.IsLocalPlayer())
                                            {


                                                    int randomSpot6 = new System.Random().Next(1, 55);
                                                    typeof(Projectile).GetField("traveledDistance", BindingFlags.Instance | BindingFlags.NonPublic).SetValue(projectile, randomSpot6);

                                                    if (menu.ф)
                                                    {
                                                        projectile.thickness = 0f;
                                                    }
                                                    else
                                                    {
                                                        projectile.thickness = 100f;
                                                    }
                                                    projectile.InitializeVelocity(Vector3.down); Vector3.Distance(MainCamera.mainCamera.transform.position, menu.ф ? result.model.rootBone.transform.position : result.model.headBone.transform.position + new Vector3(0f, 0.05f, 0f));
                                                    typeof(Projectile).GetField("currentPosition", BindingFlags.Instance | BindingFlags.NonPublic).SetValue(projectile, menu.ф ? result.model.rootBone.transform.position : result.model.headBone.transform.position + new Vector3(0f, 0.05f, 0f));
                                                    typeof(Projectile).GetField("currentVelocity", BindingFlags.Instance | BindingFlags.NonPublic).SetValue(projectile, Vector3.down * 3000f);
                                                    projectile.transform.position = Vector3.Lerp(projectile.transform.position, menu.ф ? result.model.rootBone.transform.position : result.model.headBone.transform.position + new Vector3(0f, 0.05f, 0f), Vector3.Distance(projectile.transform.position, menu.ф ? result.model.rootBone.transform.position : result.model.headBone.transform.position + new Vector3(0f, 0.05f, 0f) * Time.deltaTime));
                                                
                                            }
                                        }
                                    }
                                    int targetdistance = (int)Vector3.Distance(MainCamera.mainCamera.transform.position, HACK.target());
                                    int targetdistance2 = (int)Vector3.Distance(MainCamera.mainCamera.transform.position, HACK.targetheli());
                                    int targetdistance3 = (int)Vector3.Distance(MainCamera.mainCamera.transform.position, HACK.giva());
                                    if (menu.zalypa)
                                    {
                                        System.Random rand = new System.Random();
                                        projectile.traveledDistance = rand.Next(1000, 999999999);
                                    }
                                    if (menu.zalypa1)
                                    {
                                        System.Random rand = new System.Random();
                                        projectile.traveledDistance = rand.Next(1, 1);
                                    }
                                    int projectiledistance = (int)Vector3.Distance(MainCamera.mainCamera.transform.position, projectile.currentPosition);

                                    if (UnityEngine.Input.GetKey(KeyCode.X))
                                    {

                                        if (projectile.isAlive && projectile.isAuthoritative)
                                        {


                                            if (CFG.Misc.cahh)
                                            {

                                                Vector3 asd = (target() - projectile.currentPosition).normalized;
                                                Vector3 vector2 = asd * itemmodproj.GetRandomVelocity();
                                                projectile.currentVelocity = vector2;
                                            }
                                            if (CFG.Aimbot.qewqefdsf)
                                            {
                                                Vector3 asd = (giva() - projectile.currentPosition).normalized;
                                                Vector3 vector2 = asd * itemmodproj.GetRandomVelocity();
                                                projectile.currentVelocity = vector2;
                                            }
                                            if (CFG.Aimbot.BulletDropPrediction)
                                            {
                                                Vector3 asd = (targetheli() - projectile.currentPosition).normalized;
                                                Vector3 vector2 = asd * itemmodproj.GetRandomVelocity();
                                                projectile.currentVelocity = vector2;
                                            }


                                        }
                                    }
                                }
                            }

                        }
                    }

                    BaseProjectile bp = LocalPlayer.Entity.GetHeldEntity().GetComponent<BaseProjectile>();

                    if (BaseEntityEx.IsValid(bp))
                    {
                        if (HeldShits is BaseProjectile)
                        {
                            ItemDefinition bp1 = bp.primaryMagazine.ammoType;

                            if (bp1 != null)
                            {
                                ItemModProjectile test = bp1.GetComponent<ItemModProjectile>();

                                if (test != null)
                                {
                                    int targetdistance = (int)Vector3.Distance(MainCamera.mainCamera.transform.position, HACK.target());
                                    int targetdistance2 = (int)Vector3.Distance(MainCamera.mainCamera.transform.position, HACK.targetheli());

                                    int targetdistanceheli2 = (int)Vector3.Distance(MainCamera.mainCamera.transform.position, HACK.giva());

                                    int projectiledistance = (int)Vector3.Distance(MainCamera.mainCamera.transform.position, projectile.currentPosition);

                                    if (UnityEngine.Input.GetKey(KeyCode.X))
                                    {
                                        if (CFG.Misc.cahh)
                                        {
                                            Vector3 asd = (target() - projectile.currentPosition).normalized;
                                            Vector3 vector2 = asd * test.GetRandomVelocity() * bp.projectileVelocityScale;
                                            projectile.currentVelocity = vector2;
                                        }


                                        if (CFG.Aimbot.qewqefdsf)
                                        {
                                            Vector3 asd = (giva() - projectile.currentPosition).normalized;
                                            Vector3 vector2 = asd * test.GetRandomVelocity() * bp.projectileVelocityScale;
                                            projectile.currentVelocity = vector2;
                                        }
                                        if (CFG.Aimbot.BulletDropPrediction)
                                        {
                                            Vector3 asd = (targetheli() - projectile.currentPosition).normalized;
                                            Vector3 vector2 = asd * test.GetRandomVelocity() * bp.projectileVelocityScale;
                                            projectile.currentVelocity = vector2;
                                        }
                                    }
                                }
                            }
                        }
                    }
                
                }
            }


        }


    }
    private void UpdateTrampoline()
    {
        int a = 12;
        int b = 9;
        int c = 12 * 9 - 4;
        int d = c * a - 15;
        int e = d + a;
        int f = b + c;
        a = b + 12;
        b = c - 4;
        d = a + b;
        e = a + c + d;
    }

    public void SendProjectileAttack(PlayerProjectileAttack attack)
    {

        if (UnityEngine.Input.GetKey(KeyCode.X) && CFG.Aimbot.BulletDropPrediction)
        { foreach (BaseHelicopter b in companent.heli1)
                if (b != null)
                {
                    if (b.health > 5000)
                    {
                        attack.playerAttack.attack.hitBone = 566410933;
                    }
                    else
                    {
                        attack.playerAttack.attack.hitBone = 621403276;
                    }
                    attack.playerAttack.attack.hitID = b.net.ID;
                    attack.playerAttack.attack.hitPositionLocal = new Vector3(0.9f, -0.4f, 0.1f);
                    attack.playerAttack.attack.hitNormalLocal = new Vector3(0.9f, -0.4f, 0.1f);
                    LocalPlayer.Entity.ServerRPC("OnProjectileAttack", attack, null, null, null, null);
                }
        }
        if (menu.heli)
        {
            foreach (BaseHelicopter b in companent.heli1)
                if (b != null)
                {
                    if (b.health > 5000)
                    {
                        attack.playerAttack.attack.hitBone = 566410933;
                    }
                    else
                    {
                        attack.playerAttack.attack.hitBone = 621403276;
                    }
                    attack.playerAttack.attack.hitID = b.net.ID;
                    attack.playerAttack.attack.hitPositionLocal = new Vector3(0.9f, -0.4f, 0.1f);
                    attack.playerAttack.attack.hitNormalLocal = new Vector3(0.9f, -0.4f, 0.1f);
                    LocalPlayer.Entity.ServerRPC("OnProjectileAttack", attack, null, null, null, null);
                }
        }
        if (menu.garss1)
        {
            foreach (BuildingPrivlidge b in companent.tcshit)
                if (b != null && !b.IsDead())
                {
                    int lock_distance = (int)Vector3.Distance(LocalPlayer.Entity.transform.position, b.transform.position);
                    if (lock_distance <= 50f)
                    {
                        attack.playerAttack.attack.hitBone = 0;

                        attack.playerAttack.attack.hitID = b.net.ID;
                        attack.playerAttack.attack.hitPositionLocal = new Vector3(0.9f, -0.4f, 0.1f);
                        attack.playerAttack.attack.hitNormalLocal = new Vector3(0.9f, -0.4f, 0.1f);
                        LocalPlayer.Entity.ServerRPC("OnProjectileAttack", attack, null, null, null, null);
                    }
                }
        }
        bool enabled1113 = menu.heli;
        if (enabled1113)
        {
            foreach (BaseHelicopter b in companent.heli1)
            {
                if (b != null)
                {
                    bool flag19 = Vector3.Distance(LocalPlayer.Entity.transform.position, b.transform.position) > 2f;
                    if (flag19)
                    {
                        attack.hitDistance = 0f;
                        attack.playerAttack.attack.hitID = b.net.ID;
                        attack.playerAttack.attack.hitBone = (b.health > 5000 ? 621403276U : 566410933U);
                        attack.playerAttack.attack.hitPositionLocal = new Vector3(0.9f, -0.4f, 0.1f);
                        attack.playerAttack.attack.hitNormalLocal = new Vector3(0.9f, -0.4f, 0.1f);

                        Effect.client.Run(CFG.Aimbot.cbvcbcd ? "assets/bundled/prefabs/fx/hit_notify.prefab" : "assets/bundled/prefabs/fx/hit_notify.prefab", LocalPlayer.Entity.eyes.gameObject);
                    }
                    else
                    {
                        attack.hitDistance = 0f;
                        attack.playerAttack.attack.hitID = b.net.ID;
                        attack.playerAttack.attack.hitBone = (b.health > 5000 ? 621403276U : 566410933U);
                        attack.playerAttack.attack.hitPositionLocal = new Vector3(0.9f, -0.4f, 0.1f);
                        attack.playerAttack.attack.hitNormalLocal = new Vector3(0.9f, -0.4f, 0.1f);
                        attack.playerAttack.attack.hitPositionWorld = LocalPlayer.Entity.transform.position;
                        attack.playerAttack.attack.pointStart = LocalPlayer.Entity.transform.position;
                        attack.playerAttack.attack.pointEnd = LocalPlayer.Entity.transform.position;
                        Effect.client.Run(CFG.Aimbot.cbvcbcd ? "assets/bundled/prefabs/fx/hit_notify.prefab" : "assets/bundled/prefabs/fx/hit_notify.prefab", LocalPlayer.Entity.eyes.gameObject);
                    }
                }
            }
        }

        





        if (CFG.Aimbot.uytgff)
        {
            if (LocalPlayer.Entity != null)
            {
                BasePlayer result = null;
                Vector2 vector = new Vector2((float)(Screen.width / 2), (float)(Screen.height / 2));
                float num = 7000f;
                foreach (BasePlayer basePlayer in BasePlayer.visiblePlayerList)
                {
                    if (!friend.friendsList.Contains(basePlayer.userID) && basePlayer != null && !basePlayer.IsLocalPlayer() && !basePlayer.IsDead())
                    {
                        Vector3 positionBone = basePlayer.model.headBone.transform.position;

                        if (!(positionBone == Vector3.zero))
                        {
                            Vector3 vector2 = MainCamera.mainCamera.WorldToScreenPoint(positionBone);
                            if (vector2.z > 0f)
                            {
                                Vector2 vector3 = new Vector2(vector2.x, (float)Screen.height - vector2.y);
                                float num2 = Mathf.Abs(Vector2.Distance(vector, vector3));
                                if (num2 <= menu.fov1 && num2 < num)
                                {
                                    num = num2;
                                    result = basePlayer;
                                }
                            }
                        }

                    }
                }
                if (result != null && result.IsAlive() && !result.IsLocalPlayer())
                {
                    Vector3 position = result.transform.position;
                    Vector3 ptr = MainCamera.mainCamera.WorldToScreenPoint(position);
                    Vector3 vector2 = MainCamera.mainCamera.WorldToScreenPoint(position + new Vector3(0f, 1.7f, 0f));
                    Mathf.Abs(ptr.y - vector2.y);
                    if (MainCamera.mainCamera.WorldToScreenPoint(result.transform.position).z > 0f)
                    {
                        System.Random rand = new System.Random();
                        int randomSpot = rand.Next(1, 55);
                        attack.hitDistance = randomSpot;
                        attack.playerAttack.attack.hitID = result.net.ID; attack.playerAttack.attack.hitBone = (CFG.Aimbot.fdsfdsfew ? 3399023664U : 3198432U);
                        attack.playerAttack.attack.hitPartID = (CFG.Aimbot.fdsfdsfew ? 1890214305U : 1744899316U);
                        attack.playerAttack.attack.hitPositionLocal = new Vector3(-0.1f, -0.1f, 0f);
                        attack.playerAttack.attack.hitNormalLocal = new Vector3(0f, -1f, 0f);
                        LocalPlayer.Entity.ServerRPC("OnProjectileAttack", attack,null,null,null,null);
                        Effect.client.Run(CFG.Aimbot.fdsfdsfew ? "assets/bundled/prefabs/fx/hit_notify.prefab" : "assets/bundled/prefabs/fx/headshot_2d.prefab", LocalPlayer.Entity.eyes.gameObject) ;
                    }
                }
            }
            if (LocalPlayer.Entity != null)
            {
                BasePlayer result = null;
                Vector2 vector = new Vector2((float)(Screen.width / 2), (float)(Screen.height / 2));
                float num = 7000f;
                foreach (BasePlayer basePlayer in BasePlayer.visiblePlayerList)
                {
                    if (!friend.friendsList.Contains(basePlayer.userID) && basePlayer != null && !basePlayer.IsLocalPlayer()  && !basePlayer.IsDead())
                    {
                        Vector3 positionBone = basePlayer.model.headBone.transform.position;

                        if (!(positionBone == Vector3.zero))
                        {
                            Vector3 vector2 = MainCamera.mainCamera.WorldToScreenPoint(positionBone);
                            if (vector2.z > 0f)
                            {
                                Vector2 vector3 = new Vector2(vector2.x, (float)Screen.height - vector2.y);
                                float num2 = Mathf.Abs(Vector2.Distance(vector, vector3));
                                if (num2 <= menu.fov1 && num2 < num)
                                {
                                    num = num2;
                                    result = basePlayer;
                                }
                            }
                        }

                    }
                }
                if (result != null && !result.IsLocalPlayer() && !result.IsDead())
                {
                    Vector3 position2 = result.transform.position;
                    Vector3 ptr2 = MainCamera.mainCamera.WorldToScreenPoint(position2);
                    Vector3 vector4 = MainCamera.mainCamera.WorldToScreenPoint(position2 + new Vector3(0f, 1.7f, 0f));
                    Mathf.Abs(ptr2.y - vector4.y);
                    if (MainCamera.mainCamera.WorldToScreenPoint(localplayer.transform.position).z > 0f)
                    {
                        System.Random rand = new System.Random();
                        int randomSpot = rand.Next(1, 55);
                        attack.hitDistance = randomSpot;
                        attack.playerAttack.attack.hitID = result.net.ID; attack.playerAttack.attack.hitBone = (CFG.Aimbot.fdsfdsfew ? 3399023664U : 3198432U);
                        attack.playerAttack.attack.hitPartID = (CFG.Aimbot.fdsfdsfew ? 1890214305U : 1744899316U);
                        attack.playerAttack.attack.hitPositionLocal = new Vector3(-0.1f, -0.1f, 0f);
                        attack.playerAttack.attack.hitNormalLocal = new Vector3(0f, -1f, 0f);
                        LocalPlayer.Entity.ServerRPC("OnProjectileAttack", attack,null,null,null,null);
                        Effect.client.Run(CFG.Aimbot.fdsfdsfew ? "assets/bundled/prefabs/fx/hit_notify.prefab" : "assets/bundled/prefabs/fx/headshot_2d.prefab", LocalPlayer.Entity.eyes.gameObject);
                    
                    }
                }
            }
        }

            bool enabled113 = CFG.Aimbot.ssddd;
        if (enabled113)
        {
            BasePlayer result = null;
            Vector2 vector = new Vector2((float)(Screen.width / 2), (float)(Screen.height / 2));
            float num = 7000f;
            foreach (BasePlayer basePlayer in BasePlayer.visiblePlayerList)
            {
                if (!friend.friendsList.Contains(basePlayer.userID) && basePlayer != null && !basePlayer.IsLocalPlayer() && !basePlayer.IsDead())
                {
                    Vector3 positionBone = basePlayer.model.headBone.transform.position;

                    if (!(positionBone == Vector3.zero))
                    {
                        Vector3 vector2 = MainCamera.mainCamera.WorldToScreenPoint(positionBone);
                        if (vector2.z > 0f)
                        {
                            Vector2 vector3 = new Vector2(vector2.x, (float)Screen.height - vector2.y);
                            float num2 = Mathf.Abs(Vector2.Distance(vector, vector3));
                            if (num2 <= menu.fov1 && num2 < num)
                            {
                                num = num2;
                                result = basePlayer;
                            }
                        }
                    }

                }
            }
            bool flag18 = LocalPlayer.Entity != null && result != null && attack != null && !result.IsWounded() && !result.IsLocalPlayer();
            if (flag18)
            {
                bool flag19 = Vector3.Distance(LocalPlayer.Entity.transform.position, result.transform.position) > 2f;
                if (flag19)
                {
                    System.Random rand = new System.Random();
                    int randomSpot = rand.Next(1, 55);
                    attack.hitDistance = randomSpot;
                    attack.playerAttack.attack.hitID = result.net.ID;
                    attack.playerAttack.attack.hitBone = (CFG.Aimbot.cbvcbcd ? 3399023664U : 3198432U);
                    attack.playerAttack.attack.hitPartID = (CFG.Aimbot.cbvcbcd ? 1890214305U : 1744899316U);
                    attack.playerAttack.attack.hitItem = 0U;
                    attack.playerAttack.attack.hitPositionLocal = new Vector3(-0.1f, -0.1f, 0f);
                    attack.playerAttack.attack.hitNormalLocal = new Vector3(0f, -1f, 0f);
                    attack.playerAttack.attack.hitPositionWorld = result.FindBone("head").position;

                    Effect.client.Run(CFG.Aimbot.cbvcbcd ? "assets/bundled/prefabs/fx/hit_notify.prefab" : "assets/bundled/prefabs/fx/headshot_2d.prefab", LocalPlayer.Entity.eyes.gameObject);
                }
                else
                {
                    System.Random rand = new System.Random();
                    int randomSpot = rand.Next(1, 55);
                    attack.hitDistance = randomSpot;
                    attack.playerAttack.attack.hitID = result.net.ID;
                    attack.playerAttack.attack.hitBone = (CFG.Aimbot.cbvcbcd ? 3399023664U : 3198432U);
                    attack.playerAttack.attack.hitPartID = (CFG.Aimbot.cbvcbcd ? 1890214305U : 1744899316U);
                    attack.playerAttack.attack.hitItem = 0U;
                    attack.playerAttack.attack.hitPositionLocal = new Vector3(-0.1f, -0.1f, 0f);
                    attack.playerAttack.attack.hitNormalLocal = new Vector3(0f, -1f, 0f);
                    attack.playerAttack.attack.hitPositionWorld = LocalPlayer.Entity.transform.position;
                    attack.playerAttack.attack.pointStart = LocalPlayer.Entity.transform.position;
                    attack.playerAttack.attack.pointEnd = LocalPlayer.Entity.transform.position;
                    Effect.client.Run(CFG.Aimbot.cbvcbcd ? "assets/bundled/prefabs/fx/hit_notify.prefab" : "assets/bundled/prefabs/fx/headshot_2d.prefab", LocalPlayer.Entity.eyes.gameObject);
                }
            }
            











        


        }

        LocalPlayer.Entity.ServerRPC("OnProjectileAttack", attack,null,null,null,null);
       
    }
    private static global::BuildingPrivlidge targ;
    private static global::BaseNPC targ1;
    public static BasePlayer localplayer; public static Vector3 ClampAngles(Vector3 angles)
    {
        if (angles.x > 89f)
            angles.x -= 360f;
        else if (angles.x < -89f)
            angles.x += 360f;
        if (angles.y > 180f)
            angles.y -= 360f;
        else if (angles.y < -180f)
            angles.y += 360f;

        angles.z = 0f;
        return angles;
    }
    public static class Chams
    {
        public static byte[] chams = { 0x55, 0x6E, 0x69, 0x74, 0x79, 0x46, 0x53, 0x0, 0x0, 0x0, 0x0, 0x6, 0x35, 0x2E, 0x78, 0x2E, 0x78, 0x0, 0x32, 0x30, 0x31, 0x37, 0x2E, 0x32, 0x2E, 0x31, 0x66, 0x31, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x13, 0x2D, 0x0, 0x0, 0x0, 0x41, 0x0, 0x0, 0x0, 0x5B, 0x0, 0x0, 0x0, 0x43, 0x1E, 0x0, 0x1, 0x0, 0xB2, 0x1, 0x0, 0x0, 0x92, 0x68, 0x0, 0x0, 0x12, 0xBB, 0x0, 0x41, 0xE, 0x0, 0x8, 0x1D, 0x0, 0x0, 0x1A, 0x0, 0xF0, 0x18, 0x0, 0x4, 0x43, 0x41, 0x42, 0x2D, 0x64, 0x62, 0x33, 0x34, 0x36, 0x64, 0x36, 0x39, 0x31, 0x64, 0x37, 0x61, 0x63, 0x63, 0x34, 0x64, 0x63, 0x32, 0x36, 0x32, 0x35, 0x64, 0x62, 0x31, 0x39, 0x66, 0x39, 0x65, 0x33, 0x66, 0x35, 0x32, 0x0, 0x5D, 0x0, 0x0, 0x8, 0x0, 0x0, 0x0, 0x61, 0xEA, 0x8B, 0x50, 0x1D, 0x58, 0x86, 0xAF, 0x6A, 0x5B, 0x2A, 0x62, 0xBE, 0x8B, 0x7D, 0xF1, 0x9A, 0x72, 0x2A, 0x46, 0xFF, 0x98, 0xEB, 0x8C, 0x40, 0xFD, 0xCE, 0x90, 0x26, 0x77, 0x18, 0xD6, 0xB6, 0x19, 0x81, 0xF4, 0x87, 0x68, 0xD1, 0xB6, 0x4, 0x4B, 0xFE, 0x3, 0x25, 0x19, 0xE2, 0x85, 0xEA, 0x6F, 0x61, 0x65, 0xD6, 0x7F, 0xEC, 0x75, 0x9E, 0x33, 0x32, 0x9C, 0x4, 0x98, 0x1D, 0xA1, 0xF9, 0x8, 0xF8, 0xA6, 0xF9, 0xD9, 0xE7, 0x9E, 0xE5, 0x7C, 0xD5, 0xDF, 0x1D, 0x6B, 0x3, 0x54, 0xAF, 0xA5, 0x1, 0xF6, 0xA5, 0x16, 0x21, 0x4C, 0x33, 0xE, 0x66, 0x4A, 0x94, 0x11, 0xA6, 0xD5, 0x8E, 0x2A, 0x9, 0xD6, 0x75, 0x3E, 0x62, 0xBC, 0x7E, 0x1C, 0xB1, 0xB1, 0xE3, 0xDC, 0x64, 0x97, 0x47, 0x48, 0x11, 0x22, 0x35, 0xEF, 0xDC, 0x83, 0xF3, 0x1, 0xFF, 0xE7, 0x93, 0x47, 0xF7, 0x62, 0xCA, 0xDA, 0xB0, 0x14, 0xBF, 0x51, 0x8A, 0xC1, 0x30, 0x6E, 0x1B, 0xC2, 0xC4, 0xD2, 0x80, 0xF3, 0xB2, 0x4, 0x8F, 0x65, 0xD6, 0xF, 0xE8, 0xA, 0xFD, 0xB0, 0xD7, 0xDE, 0x1E, 0x48, 0xC1, 0x64, 0x11, 0x25, 0xAA, 0x31, 0xA1, 0x47, 0x51, 0x4, 0xE6, 0x40, 0x7D, 0x64, 0x16, 0xC9, 0x94, 0x77, 0x1, 0x8E, 0x92, 0xA6, 0x15, 0xBB, 0x2, 0xA8, 0xF3, 0x80, 0xCB, 0x23, 0xC, 0xA8, 0x76, 0x7E, 0xF8, 0x3F, 0xD2, 0x5E, 0x1D, 0x88, 0xF1, 0xFA, 0x65, 0x5A, 0x72, 0xDD, 0xA7, 0xD6, 0x5E, 0x4F, 0xF5, 0x7A, 0x4D, 0xC1, 0x8A, 0xC5, 0x11, 0xC0, 0xD8, 0xE7, 0x25, 0x19, 0xD2, 0xF8, 0x41, 0xDF, 0x6C, 0xAF, 0xA0, 0x90, 0x1D, 0xAE, 0x23, 0xE3, 0xA, 0x20, 0xB3, 0x79, 0xE0, 0xF1, 0x9E, 0x20, 0x99, 0x62, 0x6D, 0x33, 0xAB, 0xE8, 0xDE, 0x1E, 0xA9, 0x8E, 0xEF, 0x76, 0x71, 0x1, 0x96, 0x4B, 0x2B, 0xA5, 0xC3, 0xAE, 0xE5, 0xD4, 0x46, 0xAA, 0xBD, 0x4F, 0xAA, 0x9B, 0x87, 0x14, 0xF9, 0x66, 0xD0, 0x7B, 0xD6, 0x58, 0x32, 0xD9, 0x83, 0xBF, 0xE5, 0x86, 0x4D, 0x8C, 0xA5, 0xA, 0x92, 0xEB, 0x4C, 0x46, 0xCF, 0x56, 0x95, 0xE, 0xC6, 0x75, 0x7C, 0x11, 0x2C, 0xF5, 0x5, 0xA1, 0xC2, 0x39, 0xEA, 0x80, 0xF3, 0x65, 0xFA, 0xD4, 0x7E, 0xB3, 0x4D, 0x95, 0xC2, 0x94, 0x9, 0x91, 0x57, 0x71, 0x99, 0xF2, 0x6, 0x61, 0x51, 0x56, 0x58, 0x41, 0xD4, 0xCB, 0x4B, 0xAD, 0x73, 0xE0, 0x87, 0xAC, 0xF6, 0xED, 0xD7, 0x6D, 0x37, 0x57, 0xA, 0x6, 0x14, 0xFB, 0xD5, 0x7C, 0xA1, 0xD9, 0xC3, 0x2C, 0xE9, 0x37, 0xEE, 0xA1, 0x9D, 0x80, 0x7C, 0x30, 0xB3, 0xE0, 0x85, 0xB3, 0xDE, 0x99, 0x64, 0x11, 0xED, 0x93, 0x7A, 0x63, 0xB6, 0xDE, 0xD6, 0xA7, 0xC9, 0xA5, 0xD2, 0x49, 0xC8, 0xDE, 0x37, 0x50, 0x5F, 0x31, 0xDF, 0x9D, 0xC3, 0x11, 0xF0, 0x9D, 0x77, 0x64, 0xC, 0xE5, 0xCF, 0x39, 0xA1, 0x73, 0xEF, 0x62, 0x52, 0x7B, 0x23, 0x5B, 0xF6, 0xB7, 0x6A, 0x39, 0xB3, 0x3, 0xFA, 0x48, 0x63, 0xFF, 0xAC, 0x3, 0x72, 0x44, 0xC8, 0x36, 0xBE, 0xD3, 0xEB, 0xDD, 0x9, 0x36, 0x77, 0xAE, 0xEB, 0xE3, 0xE1, 0x66, 0xC3, 0x53, 0x1B, 0xBD, 0x46, 0x24, 0x31, 0x69, 0x87, 0xED, 0xD8, 0x24, 0x5F, 0x47, 0xB6, 0xAB, 0x9F, 0xF2, 0xBA, 0x88, 0xFB, 0x84, 0x5D, 0x3A, 0x38, 0x8C, 0x6A, 0x1F, 0xF5, 0x58, 0xE4, 0x7, 0x47, 0x14, 0x99, 0xBE, 0xCC, 0x29, 0x78, 0xBB, 0xBF, 0xB8, 0x9D, 0xB6, 0x65, 0xC6, 0xCF, 0xB5, 0x79, 0x7F, 0x63, 0xB8, 0xE5, 0x80, 0x5B, 0x2, 0xDF, 0xA4, 0xF5, 0x69, 0xBE, 0x79, 0xD3, 0xDD, 0x59, 0x31, 0xD8, 0x41, 0x23, 0x85, 0xA0, 0x72, 0x27, 0x4, 0xB0, 0x5C, 0x3C, 0x34, 0x83, 0xA8, 0x54, 0x35, 0xD5, 0x7A, 0x57, 0x1, 0x55, 0x2F, 0xF1, 0xA9, 0x1, 0x6E, 0xFA, 0x94, 0x45, 0x6B, 0x62, 0x7E, 0x60, 0xF3, 0x3, 0x5B, 0x9C, 0xC1, 0x7A, 0x3F, 0x73, 0x78, 0x48, 0x74, 0x1F, 0xFC, 0xDC, 0xC6, 0xBA, 0x2D, 0x14, 0x1C, 0xD5, 0x5F, 0xCB, 0xB7, 0xD0, 0x2A, 0x97, 0xCF, 0xF2, 0x5A, 0x4F, 0xF, 0xA6, 0x51, 0x9F, 0xAC, 0xE8, 0x28, 0xE8, 0xF2, 0x11, 0xD7, 0x68, 0x2F, 0x2D, 0x2B, 0x2A, 0xF6, 0x95, 0xFD, 0xD8, 0x50, 0x2C, 0x1D, 0x31, 0xD6, 0xE3, 0xC4, 0xEB, 0xF0, 0x95, 0x6, 0xD4, 0xC0, 0x51, 0x20, 0x65, 0x21, 0x71, 0x99, 0x6E, 0xF4, 0xFA, 0xF4, 0xCC, 0x46, 0x71, 0xBB, 0x4F, 0x5D, 0x3E, 0xCC, 0x0, 0x47, 0x19, 0xA2, 0xE3, 0xE9, 0xC, 0x10, 0xE7, 0x70, 0x72, 0xDE, 0xE7, 0xA5, 0x86, 0x53, 0x25, 0x37, 0x72, 0x42, 0xE3, 0xDA, 0xBF, 0xFA, 0x16, 0xF6, 0x25, 0xB0, 0xE8, 0x6D, 0xA, 0x5E, 0x83, 0x66, 0xAD, 0x43, 0xC8, 0xA4, 0x9A, 0xA0, 0x15, 0x34, 0xCE, 0xFA, 0xD7, 0x98, 0x5A, 0x48, 0x32, 0x34, 0x2A, 0x50, 0x5, 0xD7, 0xC5, 0xC6, 0xD7, 0x7F, 0x3E, 0xE2, 0xD6, 0x70, 0xCB, 0xBC, 0xD5, 0x21, 0xAF, 0xDB, 0x53, 0x69, 0x6C, 0x93, 0xD6, 0xC8, 0xB5, 0x88, 0xAF, 0xA, 0xDF, 0x24, 0xF9, 0xD8, 0x5, 0x4C, 0x54, 0x95, 0x25, 0x4A, 0x32, 0xD9, 0x5A, 0x5B, 0x7C, 0xD9, 0x89, 0xE0, 0xA5, 0x8E, 0x14, 0x22, 0x21, 0x6B, 0xD5, 0x7F, 0x14, 0xB2, 0x58, 0x44, 0x10, 0x75, 0xAD, 0x2F, 0xAD, 0x98, 0x33, 0xD9, 0x72, 0xD9, 0x6E, 0x48, 0xF9, 0x94, 0x70, 0x63, 0x2B, 0x37, 0x34, 0x81, 0xB7, 0x94, 0x2A, 0xD3, 0x6F, 0x4C, 0xF0, 0x9F, 0xD3, 0x0, 0x9B, 0x1, 0x16, 0x43, 0x4A, 0xA, 0xB0, 0x11, 0x1E, 0xA4, 0x27, 0x7E, 0x9, 0x85, 0x97, 0xFF, 0xAA, 0xF7, 0x1D, 0xB3, 0x64, 0xDB, 0x74, 0xA1, 0xD1, 0x2F, 0xF0, 0xB4, 0x68, 0x8E, 0x16, 0xD, 0x8E, 0x4B, 0x29, 0xFC, 0xB1, 0xA6, 0x8E, 0xC6, 0x88, 0xC2, 0x7D, 0x1E, 0x1C, 0xB3, 0x63, 0x80, 0x24, 0x1F, 0x74, 0xAD, 0x60, 0x54, 0x6A, 0x7A, 0x1A, 0xED, 0x9F, 0xDD, 0x29, 0xFF, 0x7F, 0x41, 0x78, 0x5A, 0x20, 0xF9, 0xBD, 0x6A, 0xD0, 0xAB, 0x2A, 0x2, 0x2, 0x1D, 0xE6, 0xFC, 0x3B, 0xE6, 0x13, 0x15, 0x9E, 0xF5, 0x32, 0x79, 0x59, 0xFA, 0xD6, 0x59, 0x5D, 0xF2, 0x40, 0x17, 0xBA, 0xCC, 0xD7, 0xA5, 0x6E, 0xA0, 0x59, 0xA9, 0xDC, 0x8, 0x6F, 0x81, 0x77, 0x31, 0x13, 0x4E, 0x54, 0x28, 0x5E, 0xF6, 0xEA, 0xB9, 0x18, 0x1B, 0x31, 0xE8, 0xFF, 0x7D, 0xFB, 0xDE, 0xB4, 0x53, 0xA1, 0xD5, 0xF3, 0xF2, 0x59, 0x4C, 0x91, 0x0, 0x39, 0x90, 0x6F, 0x85, 0xD0, 0xC, 0xF4, 0x43, 0x6F, 0x94, 0x48, 0xA3, 0x8, 0x8D, 0x7F, 0xCD, 0xFA, 0x6F, 0xB4, 0x38, 0x93, 0xC0, 0x44, 0xA7, 0xFC, 0xEF, 0x81, 0x93, 0xD3, 0x1, 0x7E, 0x98, 0xA5, 0x6C, 0x35, 0x75, 0x5B, 0xF0, 0xA5, 0xF1, 0x76, 0xA4, 0x87, 0x2B, 0xAA, 0x1F, 0x23, 0xB6, 0xFC, 0xAF, 0x22, 0x2C, 0x72, 0xA8, 0xD7, 0xE7, 0xDA, 0xE0, 0x5B, 0x61, 0x1B, 0xA0, 0x21, 0x62, 0xB7, 0x4F, 0x14, 0x24, 0x57, 0x7E, 0xD0, 0xA1, 0x9C, 0x22, 0x68, 0x3B, 0xB1, 0x22, 0x1A, 0x45, 0x1A, 0x72, 0xDC, 0xE3, 0x42, 0x50, 0xC9, 0x41, 0x88, 0x2D, 0xE6, 0x5F, 0x3B, 0x89, 0x20, 0x67, 0x1C, 0x7E, 0x16, 0xA1, 0x84, 0x66, 0xCD, 0x3D, 0xA6, 0x80, 0xB5, 0xA1, 0x95, 0x38, 0xCD, 0x4, 0xF0, 0x1F, 0x31, 0x59, 0x59, 0xDB, 0x86, 0x20, 0xB8, 0xB3, 0xA4, 0x20, 0xA5, 0x76, 0xC4, 0x39, 0x2, 0x5, 0xED, 0x9A, 0xB7, 0xA6, 0x31, 0xE3, 0x38, 0x99, 0xEF, 0x96, 0x2A, 0xA3, 0xC6, 0xC9, 0x11, 0x6E, 0x64, 0xF3, 0xFE, 0xF1, 0x7E, 0xE7, 0x50, 0x21, 0x15, 0xC3, 0x34, 0x71, 0x9A, 0x4A, 0x50, 0xE1, 0x68, 0x4B, 0xB8, 0x4, 0x8D, 0xE4, 0x2B, 0x7E, 0x8E, 0x3F, 0xEC, 0x99, 0x93, 0x4C, 0x41, 0x1F, 0xD9, 0x18, 0x35, 0x3F, 0x8A, 0xFC, 0xC9, 0xE, 0xDD, 0x17, 0x89, 0x64, 0xC8, 0x76, 0x13, 0xE8, 0xEC, 0x15, 0xC, 0x7E, 0xF7, 0x75, 0x5, 0x51, 0xAF, 0x5D, 0xA7, 0x52, 0xBC, 0xBF, 0x87, 0xC5, 0xFE, 0x78, 0xC5, 0x10, 0xB3, 0xC9, 0xD, 0xFD, 0xF3, 0x3E, 0xE2, 0xA9, 0x47, 0x1E, 0xF9, 0x33, 0x8B, 0xB7, 0x73, 0xA0, 0x92, 0xB4, 0xE9, 0xF1, 0xC0, 0xCE, 0xF0, 0x7C, 0x71, 0x21, 0x1C, 0xF8, 0x9A, 0xE9, 0x32, 0x33, 0x18, 0x3, 0xA7, 0x1F, 0x4, 0x6, 0xD3, 0x87, 0x53, 0xD, 0x2F, 0x74, 0xAC, 0x48, 0x7, 0x15, 0xD5, 0xE2, 0xC8, 0xE8, 0xE0, 0xEE, 0x2A, 0x7A, 0x84, 0xF, 0xED, 0x1D, 0xC0, 0x33, 0xB, 0x66, 0x6E, 0x41, 0xF3, 0xE9, 0x65, 0x1D, 0x9D, 0xB0, 0xF7, 0x80, 0xA0, 0xC, 0x82, 0xC0, 0xD2, 0x8E, 0x62, 0x70, 0x2F, 0x43, 0x3F, 0x8, 0x6B, 0x2A, 0x4F, 0x9E, 0x0, 0x97, 0x65, 0x4C, 0xAB, 0x46, 0x4F, 0x74, 0x4C, 0xA0, 0x59, 0xD2, 0x22, 0x43, 0x67, 0x5, 0x55, 0x3B, 0x4F, 0xEA, 0xB9, 0x13, 0x6A, 0x9B, 0xC, 0xAB, 0xF2, 0x97, 0x47, 0x7B, 0xA1, 0x64, 0xE0, 0x6C, 0x90, 0xD3, 0xA, 0xBB, 0x65, 0xD0, 0xCD, 0x57, 0xF4, 0x2A, 0xDE, 0xE2, 0x88, 0x6C, 0xD, 0x6, 0xF7, 0x1A, 0xDC, 0x15, 0x86, 0xF, 0xB3, 0x32, 0x73, 0xC2, 0xD9, 0xA0, 0x45, 0x57, 0x51, 0x5B, 0x89, 0xCC, 0x9A, 0xBC, 0xD3, 0x52, 0x52, 0x90, 0xD9, 0x40, 0xD5, 0x2F, 0x46, 0x8E, 0x51, 0x28, 0x5F, 0x70, 0x52, 0x88, 0x7C, 0x28, 0xF2, 0x5E, 0xDC, 0x7B, 0x52, 0x8C, 0x7A, 0x4E, 0x83, 0x45, 0x41, 0x71, 0x27, 0x1A, 0x33, 0x80, 0xA8, 0xB0, 0xCC, 0xD6, 0x6F, 0x28, 0xE7, 0x98, 0x5A, 0xFA, 0x8E, 0xC1, 0xA9, 0xE0, 0x2C, 0x63, 0x99, 0xE0, 0xAC, 0xBE, 0x97, 0xBF, 0x54, 0x4E, 0x6D, 0x26, 0x7, 0x17, 0xF9, 0xBD, 0x1E, 0x10, 0xCA, 0x38, 0x7F, 0xF0, 0x3D, 0xC0, 0x14, 0xB7, 0x2A, 0x75, 0x7B, 0xB3, 0x9B, 0xB8, 0xE2, 0x11, 0xF1, 0xEE, 0xC6, 0x32, 0xA2, 0xB8, 0x56, 0x70, 0x36, 0xA8, 0xFC, 0x9D, 0x83, 0x63, 0xC8, 0x26, 0xB1, 0xDC, 0xC8, 0x77, 0x8E, 0x2E, 0xD9, 0x66, 0x43, 0x3A, 0x66, 0x50, 0xE7, 0xF9, 0x82, 0xC9, 0x2B, 0x79, 0xB5, 0xED, 0x73, 0x4D, 0xB3, 0xDC, 0x8E, 0x16, 0x5D, 0x7C, 0x27, 0xD2, 0xBC, 0xD1, 0x1D, 0x80, 0x87, 0x49, 0x63, 0xEC, 0x49, 0x99, 0xF2, 0xC1, 0x65, 0xD1, 0x43, 0x91, 0x48, 0xC2, 0x2C, 0xAF, 0xEB, 0x86, 0xC6, 0xD9, 0x7B, 0x55, 0xF9, 0xCC, 0x7D, 0x39, 0x84, 0x4D, 0x26, 0x6B, 0xCE, 0x3B, 0x7A, 0xA8, 0x4B, 0x66, 0xD8, 0xD, 0xBA, 0xBE, 0xBE, 0x91, 0xF7, 0x8D, 0xFF, 0x4F, 0xF3, 0xFB, 0xB4, 0x6, 0xFF, 0x70, 0x95, 0x52, 0x64, 0xBD, 0x38, 0x7D, 0xD, 0x15, 0xD0, 0x37, 0x73, 0xC4, 0xDC, 0xBA, 0x2F, 0x1F, 0x88, 0xDA, 0x6, 0xB6, 0xA0, 0x96, 0xC7, 0x99, 0xF5, 0x74, 0xD3, 0x7C, 0xF7, 0x9F, 0x13, 0x37, 0xF6, 0x6, 0xB3, 0x7A, 0xD3, 0x58, 0x25, 0x50, 0x3A, 0x70, 0x98, 0x4D, 0xA7, 0x64, 0x9, 0x44, 0x5E, 0x6E, 0xD5, 0x36, 0xCF, 0x3, 0x3, 0x6A, 0xE, 0x2F, 0x3, 0xB5, 0xBA, 0x39, 0x67, 0xEB, 0x28, 0x4F, 0x91, 0x2A, 0x8, 0x9B, 0xE1, 0xAE, 0xFB, 0x9B, 0x2F, 0x50, 0x5A, 0x91, 0xAE, 0x1F, 0xD3, 0xB0, 0x47, 0x3B, 0xB6, 0x83, 0x87, 0xB1, 0x62, 0x4D, 0x14, 0xDC, 0x91, 0x28, 0xE7, 0xC, 0x3C, 0xCE, 0x94, 0x4B, 0x25, 0x8, 0x71, 0xA8, 0x5F, 0x3D, 0xC2, 0xA6, 0x34, 0xDE, 0x44, 0xB4, 0xC9, 0x74, 0x58, 0x7B, 0x63, 0x4E, 0x17, 0x24, 0x3D, 0xE1, 0x1F, 0xD, 0x2A, 0x74, 0x6F, 0xFF, 0x8B, 0xFD, 0xDD, 0xFD, 0x3A, 0xC9, 0xDE, 0xEF, 0xAC, 0x18, 0xAF, 0x12, 0x4D, 0x81, 0xE7, 0x27, 0x67, 0x47, 0x6C, 0xD2, 0x20, 0x8A, 0x3D, 0x92, 0x9B, 0x5D, 0x73, 0x7D, 0x8B, 0x2, 0x19, 0x30, 0x91, 0x7A, 0x8, 0xC1, 0x82, 0xB7, 0xDA, 0x53, 0x63, 0xCD, 0xC7, 0xA3, 0x9, 0x9, 0x35, 0xE9, 0xD8, 0x6B, 0x30, 0xED, 0xF1, 0xAD, 0x57, 0x2F, 0xF6, 0x40, 0xA5, 0x1E, 0xB9, 0x7, 0xCC, 0x76, 0x7D, 0x82, 0x5B, 0x1, 0x1E, 0xED, 0xA5, 0x11, 0x9B, 0x8C, 0x2, 0xCD, 0xD0, 0xFA, 0x77, 0x99, 0xBB, 0x29, 0x37, 0x67, 0x95, 0x28, 0xD1, 0xC0, 0x55, 0xDF, 0x2E, 0x48, 0xD6, 0x0, 0x26, 0xC7, 0x18, 0x7E, 0x54, 0xC, 0x13, 0xC6, 0xDF, 0xE1, 0x5, 0x6A, 0x60, 0x8C, 0x55, 0x7D, 0x49, 0x3B, 0xEB, 0xD2, 0x76, 0xFB, 0xA5, 0xE1, 0xBB, 0x9B, 0xD0, 0xE, 0x6E, 0x6F, 0xF5, 0xBC, 0xB7, 0xD8, 0x45, 0x8A, 0x92, 0xD8, 0xD1, 0x2D, 0x62, 0xFE, 0x83, 0xA3, 0x25, 0x54, 0x52, 0x57, 0x64, 0x68, 0x51, 0xE9, 0x6E, 0xE4, 0xDA, 0x22, 0xFB, 0x4D, 0x6C, 0x35, 0xA6, 0xE9, 0xB2, 0xEE, 0xF4, 0xC1, 0x41, 0xC9, 0xAC, 0x11, 0x78, 0x3E, 0x0, 0xF3, 0xC0, 0x73, 0x16, 0x36, 0x5, 0xC3, 0xB, 0xAE, 0xA6, 0xDA, 0x70, 0xA4, 0xE1, 0x8E, 0x3E, 0x9F, 0x3, 0x9B, 0x1E, 0x28, 0xAA, 0xB9, 0xA5, 0x5E, 0x2A, 0xE9, 0x46, 0x37, 0xD6, 0x3C, 0xCF, 0x21, 0xAC, 0x14, 0xB6, 0x3D, 0xA9, 0xF9, 0xBA, 0x8A, 0x17, 0x19, 0x4D, 0xCC, 0xFC, 0xEF, 0xD9, 0x30, 0x69, 0x64, 0xCF, 0xEC, 0xB9, 0x24, 0xB, 0x6, 0xEC, 0xBE, 0x30, 0x9A, 0x97, 0x40, 0x8, 0xB1, 0x26, 0xAC, 0xBF, 0xFC, 0xEC, 0xE6, 0xB5, 0x52, 0x7B, 0xB7, 0x4, 0xCD, 0x48, 0xDB, 0x3F, 0x70, 0xAC, 0x51, 0x4C, 0x73, 0x7E, 0xCD, 0x7C, 0x23, 0x65, 0x95, 0xB7, 0x7A, 0xF5, 0x7F, 0x43, 0x9A, 0x5D, 0xCF, 0x66, 0x16, 0x14, 0xFC, 0x55, 0xDD, 0x7E, 0x2D, 0x8, 0xEC, 0xE2, 0x2, 0x29, 0x8E, 0x8D, 0x9F, 0xA0, 0xDD, 0x9, 0x81, 0x4, 0x94, 0xA9, 0xFA, 0x9B, 0x2C, 0x7E, 0x4D, 0xB2, 0x31, 0x4F, 0x79, 0x30, 0x6E, 0x3F, 0x69, 0xB2, 0x2B, 0x16, 0xDE, 0xF6, 0x5E, 0x86, 0x3, 0xC1, 0x85, 0xFA, 0xCD, 0x3D, 0xB5, 0x46, 0x67, 0xDC, 0x68, 0x69, 0xE5, 0xEB, 0xC6, 0x71, 0x6D, 0x4A, 0x7C, 0x4, 0x82, 0xB7, 0xA1, 0xB3, 0x5A, 0x69, 0xC5, 0xE6, 0x72, 0xCF, 0xB2, 0x8, 0x2F, 0xE4, 0x16, 0xCD, 0xE6, 0x50, 0x6A, 0xC6, 0xF6, 0xFA, 0xA1, 0xEA, 0xA, 0xD1, 0xB, 0x97, 0x6F, 0x7C, 0xBB, 0x32, 0x85, 0x60, 0x23, 0xFD, 0x87, 0xF5, 0x26, 0x84, 0xA4, 0x90, 0xE6, 0xE6, 0xB4, 0xA5, 0x16, 0x92, 0x86, 0xBE, 0x99, 0x1A, 0x16, 0xAE, 0x26, 0xE4, 0x70, 0xBF, 0x48, 0xCC, 0x26, 0xEB, 0xBF, 0x37, 0xF8, 0x97, 0xF5, 0xE0, 0xB6, 0x25, 0x8F, 0x70, 0x38, 0x3B, 0x39, 0x22, 0xBC, 0xB1, 0xE2, 0x2E, 0x6E, 0xD1, 0xFB, 0x28, 0x4E, 0x44, 0xE, 0x73, 0xC2, 0xDE, 0xFB, 0xC6, 0xC0, 0xD9, 0x88, 0xF, 0x74, 0xA7, 0xD4, 0xAB, 0xC5, 0xFB, 0x9E, 0xED, 0x33, 0x53, 0x66, 0x32, 0xC4, 0xF5, 0xD1, 0x14, 0xFF, 0x84, 0x65, 0xDB, 0x59, 0xBE, 0xEC, 0x41, 0x45, 0xF5, 0x17, 0x6E, 0xA5, 0xED, 0x21, 0x85, 0xF7, 0x8B, 0x82, 0xDB, 0xA7, 0x31, 0x5F, 0x60, 0x4E, 0xF4, 0xC2, 0x64, 0x84, 0x58, 0x9D, 0x3F, 0x6C, 0xDF, 0x84, 0xAB, 0x5, 0x11, 0x8E, 0xE4, 0xC0, 0xD9, 0xA6, 0x5A, 0x93, 0x15, 0x27, 0x75, 0x95, 0x35, 0xC9, 0x9B, 0x2C, 0x14, 0xF7, 0x17, 0xBF, 0xAF, 0x13, 0xD, 0x52, 0xC6, 0xF, 0xE1, 0xE7, 0x63, 0xF2, 0x4E, 0xB4, 0x2C, 0x39, 0x8F, 0x6A, 0x34, 0x27, 0x8E, 0x7, 0xA9, 0x19, 0xD8, 0x26, 0x4A, 0xD2, 0xED, 0x33, 0xAD, 0x8A, 0xFD, 0xFB, 0x2A, 0xE4, 0xFA, 0xF1, 0x7, 0xC4, 0xDC, 0x57, 0x6F, 0xA5, 0x31, 0x92, 0xC4, 0x26, 0x10, 0x46, 0x60, 0x4, 0x74, 0x51, 0xE0, 0xF6, 0xC1, 0xD, 0x80, 0x77, 0x2B, 0x6C, 0x66, 0x3F, 0xD1, 0xE1, 0xC6, 0xFF, 0x7E, 0x36, 0xC0, 0x18, 0x47, 0xF1, 0xFA, 0x92, 0x4C, 0xB, 0x21, 0x67, 0xAC, 0xC2, 0x84, 0x62, 0xB3, 0x22, 0xF9, 0x98, 0x48, 0xF3, 0x21, 0x9E, 0x45, 0xDD, 0x0, 0xB1, 0xF0, 0x88, 0xF4, 0xED, 0x65, 0x93, 0x2B, 0xE0, 0xBC, 0xBC, 0xED, 0x80, 0x7, 0x3E, 0x7B, 0xA9, 0xA7, 0x75, 0xC3, 0x48, 0x6A, 0x48, 0x0, 0xAD, 0x38, 0x1A, 0x73, 0x65, 0xA7, 0x40, 0x2B, 0xB0, 0x18, 0x37, 0xA5, 0x9C, 0x75, 0x85, 0x21, 0xE6, 0xE, 0x3A, 0x2C, 0xFF, 0x39, 0x4A, 0x5D, 0xD6, 0x10, 0x81, 0x69, 0x2C, 0x7C, 0x60, 0x25, 0x1, 0x2C, 0xA, 0xB2, 0xFE, 0x72, 0xAF, 0x2, 0xC, 0x25, 0xCC, 0x60, 0x26, 0x36, 0x8A, 0x6A, 0x32, 0x3F, 0x4E, 0xFD, 0xDC, 0x6C, 0xB5, 0x13, 0x5D, 0x95, 0x71, 0x60, 0x73, 0x5D, 0x22, 0x3A, 0x1, 0x5A, 0x24, 0x84, 0x25, 0x79, 0xB3, 0xAA, 0xA9, 0x43, 0xCE, 0x92, 0x25, 0xCA, 0x37, 0x64, 0xF7, 0x8B, 0x1D, 0x5A, 0x8C, 0x7F, 0xB, 0x23, 0x78, 0x16, 0x6A, 0x88, 0x4C, 0xDD, 0x9B, 0x5E, 0xA7, 0xDC, 0xBF, 0x49, 0x5, 0xD5, 0x3D, 0x52, 0xAC, 0x45, 0x34, 0x14, 0x83, 0x57, 0x39, 0x41, 0x8D, 0x21, 0xBC, 0xDF, 0xEF, 0x5D, 0x8C, 0xC7, 0xC2, 0xFD, 0xBE, 0x43, 0xF9, 0x5C, 0xB3, 0x59, 0xAA, 0x65, 0xEC, 0xED, 0x16, 0x80, 0x6E, 0xF4, 0x36, 0x3C, 0x84, 0xEA, 0x15, 0xDE, 0xE8, 0x48, 0x1C, 0x7, 0xBB, 0x2D, 0x37, 0xCB, 0x22, 0x99, 0x7D, 0x35, 0x7D, 0xED, 0xA7, 0xEB, 0x55, 0x71, 0x56, 0x4B, 0x37, 0xC0, 0x48, 0xED, 0xD0, 0x42, 0xBB, 0x14, 0x37, 0x3A, 0x74, 0xC3, 0x86, 0xED, 0x51, 0xF3, 0xF3, 0x64, 0xE1, 0x8, 0xB1, 0x41, 0xB9, 0x23, 0xA5, 0x1A, 0x7E, 0xCA, 0x2F, 0xFB, 0x9F, 0x86, 0x63, 0x47, 0x55, 0x4C, 0x35, 0x83, 0x62, 0xE1, 0xB1, 0xFD, 0xBA, 0xBE, 0x6A, 0x97, 0xAE, 0x46, 0x4, 0x6E, 0xD8, 0xC7, 0x82, 0xC1, 0x8E, 0x56, 0xD9, 0xF7, 0xDC, 0x7, 0xD9, 0xCC, 0x38, 0x15, 0xA7, 0xBD, 0x54, 0x1C, 0xD3, 0x94, 0xB0, 0xD8, 0x35, 0xD1, 0x7A, 0x30, 0x22, 0xA9, 0x42, 0xBB, 0x1D, 0x4D, 0x31, 0x54, 0xFC, 0x85, 0x54, 0x4, 0xF, 0x6E, 0xBE, 0xC4, 0xD7, 0xBC, 0xFF, 0x24, 0xC4, 0xCD, 0x60, 0x60, 0x91, 0xE0, 0x5B, 0x89, 0x30, 0xF2, 0xA, 0xD4, 0xAE, 0xBC, 0xAF, 0xBE, 0xE7, 0xC2, 0xE2, 0x76, 0xB9, 0x8A, 0x4E, 0xAF, 0x8, 0x1A, 0x64, 0x43, 0x63, 0x6, 0xDD, 0x2A, 0x6A, 0xFE, 0xD0, 0xCD, 0x19, 0xB0, 0x63, 0x30, 0xDD, 0x3F, 0xFC, 0x55, 0x65, 0x57, 0x44, 0x4C, 0xC7, 0x1A, 0x59, 0x1D, 0x40, 0x79, 0xFE, 0x92, 0xF6, 0x39, 0xAD, 0x80, 0x2D, 0xB, 0x57, 0x22, 0x32, 0x8C, 0x96, 0x3E, 0x6F, 0xB4, 0xD8, 0xF2, 0x3F, 0x1, 0xBA, 0x34, 0x85, 0x97, 0x9B, 0x8C, 0x67, 0x3B, 0x91, 0xB9, 0x39, 0x6E, 0x88, 0x5, 0xED, 0xE7, 0x92, 0x2C, 0x7F, 0x90, 0xB4, 0xAC, 0x32, 0x14, 0xB, 0xA6, 0xE, 0x6A, 0x9, 0xAC, 0x70, 0xFC, 0x59, 0x2B, 0x2C, 0x68, 0x25, 0xF8, 0x2C, 0x9F, 0x2F, 0x1D, 0xF4, 0x5A, 0x79, 0x73, 0x8D, 0x7F, 0xCB, 0x73, 0xF3, 0x68, 0x3F, 0x7B, 0x6B, 0xC1, 0x84, 0x9C, 0xB3, 0xB1, 0x82, 0x57, 0x4, 0x6F, 0xCA, 0x9D, 0x2, 0xB6, 0xBA, 0xFC, 0xCA, 0xB8, 0x46, 0x36, 0x72, 0x94, 0x86, 0xBA, 0x75, 0xF4, 0xC, 0x0, 0x24, 0x65, 0xF6, 0x91, 0x73, 0x23, 0xF, 0x92, 0x54, 0x5, 0x34, 0x92, 0xE1, 0xF4, 0xE5, 0xB7, 0xB7, 0x31, 0x26, 0x1, 0xF6, 0xB2, 0x2D, 0xA4, 0x7E, 0x56, 0x1E, 0x36, 0x88, 0xE7, 0xC1, 0x4A, 0xF1, 0x70, 0xE5, 0x70, 0x75, 0x12, 0xDC, 0xC9, 0x9B, 0xD8, 0x1F, 0x76, 0xF5, 0x36, 0xCD, 0x70, 0x88, 0x96, 0xCF, 0x4B, 0xD6, 0x39, 0x4F, 0x75, 0x8E, 0x5F, 0x7, 0x59, 0xD5, 0x36, 0x6D, 0xD8, 0xDA, 0x2D, 0xB, 0x65, 0x23, 0x31, 0xA1, 0xF8, 0xD8, 0xE7, 0xC2, 0xF, 0x72, 0x5B, 0x8D, 0x53, 0xD4, 0x61, 0x5B, 0xE5, 0xF5, 0x9C, 0x36, 0xC7, 0xF, 0xBE, 0xF6, 0x36, 0xBB, 0xCE, 0xB6, 0xCB, 0xF7, 0x67, 0xB4, 0x8E, 0x31, 0x88, 0x90, 0x8D, 0xCA, 0xA4, 0x72, 0xD, 0x3A, 0x78, 0x26, 0x7E, 0xBF, 0xB0, 0xDF, 0xC7, 0xD9, 0x25, 0xC4, 0xF6, 0x70, 0x9C, 0xD9, 0x9, 0x98, 0x34, 0x5C, 0x12, 0x96, 0x69, 0xED, 0x80, 0xEC, 0x46, 0x0, 0x54, 0x67, 0xB6, 0xE7, 0xC, 0x96, 0x5E, 0x15, 0x32, 0x5D, 0x44, 0x73, 0x9E, 0xED, 0x85, 0x4D, 0x70, 0x51, 0x25, 0x9E, 0xCF, 0x2B, 0xD2, 0xC2, 0xD7, 0x7B, 0x6C, 0x45, 0x1D, 0xFF, 0x7D, 0x59, 0x5E, 0x3F, 0x27, 0x15, 0xD7, 0xE1, 0x3, 0xA0, 0xD9, 0x30, 0xF1, 0x89, 0x8D, 0xE4, 0x39, 0xDA, 0xDF, 0xE6, 0x80, 0xBD, 0x7B, 0x56, 0xD1, 0x4C, 0x1A, 0xC7, 0x6, 0xC9, 0xE9, 0x99, 0x22, 0xD3, 0x87, 0xB3, 0x75, 0xB5, 0xC4, 0x4E, 0x8B, 0x2, 0x7C, 0x1D, 0x25, 0x8C, 0xAE, 0xEE, 0x51, 0x9F, 0x1E, 0xAD, 0x70, 0x9A, 0x3, 0x8B, 0xB9, 0x4, 0xAC, 0xC3, 0x1A, 0x5A, 0xBA, 0x3C, 0xCE, 0xBF, 0x4C, 0xA0, 0xD2, 0x54, 0x6B, 0x2D, 0x21, 0xBF, 0x6C, 0x4A, 0x79, 0xDD, 0x53, 0xF0, 0xAE, 0x91, 0x5B, 0x4B, 0xA2, 0x5C, 0xCE, 0xED, 0x31, 0x83, 0x14, 0x89, 0x82, 0xA4, 0xFC, 0x17, 0xE8, 0xF5, 0x60, 0x2F, 0x91, 0x24, 0x95, 0xD5, 0xB6, 0x7, 0x6B, 0x53, 0x21, 0x4B, 0x39, 0x48, 0xEA, 0xC7, 0x51, 0x8F, 0xCD, 0x23, 0x77, 0x1F, 0xC1, 0xFE, 0x46, 0xDF, 0x25, 0xA0, 0xF2, 0x8B, 0xFA, 0x4C, 0xBF, 0x7B, 0x93, 0xEA, 0xA3, 0xB, 0xA8, 0x20, 0x70, 0x6D, 0xA5, 0x5, 0x83, 0x7F, 0x64, 0xBA, 0xD5, 0x9, 0xB5, 0x47, 0x4C, 0x92, 0xB5, 0xD5, 0x11, 0x52, 0x3C, 0xC3, 0x2D, 0x5C, 0x7F, 0x93, 0xF0, 0xA8, 0x30, 0xF7, 0xE, 0x1A, 0xDD, 0xCE, 0xE, 0x4F, 0x55, 0xE7, 0x97, 0x70, 0xC9, 0xEA, 0xCF, 0x6A, 0xE2, 0xEF, 0x92, 0x77, 0x6B, 0x71, 0xC6, 0xF2, 0xDF, 0x40, 0x55, 0x3F, 0x46, 0x28, 0x16, 0xC8, 0x91, 0xC5, 0xDF, 0xB0, 0x5C, 0xF4, 0x9A, 0x12, 0x16, 0x33, 0x20, 0x45, 0x59, 0x8D, 0xED, 0xE6, 0x2C, 0xFB, 0x20, 0xF4, 0xF4, 0xA1, 0x59, 0x30, 0x45, 0xE6, 0x33, 0xA6, 0xE1, 0x77, 0xC0, 0x49, 0xCB, 0xB, 0x4C, 0xC0, 0x6, 0xBC, 0x8, 0x2F, 0x54, 0xD5, 0x80, 0x7B, 0xA6, 0x2C, 0xA2, 0xEF, 0xAA, 0xC3, 0xBE, 0x48, 0x42, 0xDD, 0xCB, 0x4B, 0xE6, 0xFF, 0x80, 0x66, 0x30, 0x2F, 0x92, 0x75, 0x8F, 0x73, 0xF, 0x36, 0xB2, 0x21, 0xD1, 0xE8, 0x96, 0xE6, 0xFC, 0x9F, 0x53, 0xA5, 0x62, 0x30, 0x55, 0x76, 0xAD, 0xF6, 0x50, 0x84, 0x42, 0x13, 0xD9, 0x38, 0x82, 0xB4, 0x1D, 0xB2, 0xC7, 0xFB, 0x2B, 0xB4, 0xAD, 0xD5, 0x8, 0xA1, 0xA6, 0x11, 0x96, 0x4D, 0x14, 0x54, 0xC7, 0x26, 0x3B, 0x7, 0x68, 0x15, 0xE8, 0xE2, 0x28, 0x4B, 0xA0, 0x19, 0xB6, 0x84, 0x32, 0xB7, 0x34, 0x9B, 0x87, 0x4C, 0x90, 0x9B, 0x37, 0xED, 0xA3, 0x32, 0x8C, 0x60, 0xF2, 0x41, 0x53, 0x8, 0xE, 0x40, 0x43, 0xEA, 0xAD, 0x7B, 0x55, 0xCD, 0x8C, 0x4D, 0x29, 0xD8, 0x33, 0x1A, 0x69, 0x96, 0x5D, 0x5A, 0xE0, 0x1, 0x87, 0x92, 0x1C, 0xC9, 0x98, 0xB0, 0x8, 0xE2, 0xF0, 0xD1, 0x67, 0x28, 0xEE, 0xEC, 0x11, 0xFA, 0xDB, 0xA4, 0x24, 0xC0, 0x52, 0x42, 0x7D, 0x20, 0xC1, 0x64, 0x8C, 0x9E, 0x98, 0x64, 0xBF, 0x3E, 0xC8, 0xD4, 0xB5, 0x7, 0x9D, 0x5D, 0x9C, 0x89, 0xD8, 0xF7, 0x36, 0x38, 0x9E, 0xB2, 0x5D, 0xD6, 0x37, 0x2B, 0x7, 0x1D, 0x1A, 0xF, 0xE4, 0x16, 0x92, 0xF5, 0x6D, 0x1B, 0xAD, 0x9C, 0x57, 0x10, 0x99, 0xE6, 0xF5, 0xA3, 0x65, 0x66, 0xE4, 0xED, 0x47, 0xCD, 0x6E, 0xBE, 0x39, 0x7C, 0x35, 0xDF, 0x7D, 0x34, 0x80, 0xF, 0xDC, 0xDC, 0x43, 0xE, 0xC, 0x1C, 0x21, 0x48, 0x2B, 0x16, 0x8, 0x8B, 0xDA, 0x56, 0xF, 0x35, 0xF6, 0x74, 0xDE, 0x8A, 0xC4, 0x27, 0xC6, 0x64, 0x5C, 0xE3, 0x42, 0xD3, 0x0, 0x46, 0x95, 0x4A, 0x26, 0x8F, 0x2C, 0x16, 0x14, 0xF6, 0xFF, 0xE7, 0x8, 0x7, 0xC7, 0xB8, 0x1B, 0xD9, 0x27, 0x2B, 0xCE, 0x48, 0x3E, 0x12, 0xC5, 0xF2, 0xE3, 0xCB, 0x1D, 0xB1, 0x77, 0xD5, 0xB8, 0xDF, 0x11, 0xBE, 0x67, 0x28, 0xEB, 0x4C, 0x6D, 0xD3, 0x52, 0x93, 0xE1, 0x85, 0x49, 0xC2, 0x27, 0xC, 0x8C, 0xEC, 0xA2, 0xBB, 0x1, 0x98, 0xBE, 0x19, 0xEF, 0x92, 0x27, 0x16, 0xD4, 0x28, 0xA1, 0x6D, 0x3D, 0x2B, 0x5B, 0x53, 0xC4, 0x2E, 0xE6, 0x7F, 0x2D, 0x5C, 0x10, 0xAC, 0xA2, 0xCF, 0xD, 0x90, 0x58, 0x5A, 0xAB, 0xCF, 0xE, 0x99, 0x1A, 0xC2, 0xA4, 0xA, 0xCE, 0xF2, 0xA2, 0xC0, 0xFF, 0x96, 0x35, 0x8E, 0xAB, 0x4F, 0x80, 0x6B, 0x5D, 0x3D, 0x1B, 0x13, 0xFD, 0xD0, 0x99, 0x6E, 0x3E, 0x96, 0x9B, 0x5F, 0x94, 0xCC, 0x46, 0xF1, 0x6E, 0x92, 0x1B, 0xA9, 0x68, 0xDB, 0x18, 0xAB, 0x29, 0x28, 0x2D, 0xD6, 0x66, 0x4D, 0x31, 0x53, 0x36, 0xE, 0x1D, 0x6A, 0x90, 0xB6, 0xC, 0x32, 0xF1, 0x1E, 0xBD, 0x2C, 0xBF, 0x27, 0xF2, 0x5, 0x53, 0x4B, 0xD3, 0x4D, 0xF7, 0xE5, 0xEF, 0xDE, 0xDD, 0xE5, 0x56, 0x9B, 0x1D, 0x57, 0x5E, 0x3, 0xEA, 0x6D, 0xF4, 0x44, 0x65, 0x74, 0x8A, 0xC2, 0x89, 0xCB, 0xA0, 0x90, 0x80, 0x7D, 0xA3, 0x46, 0xE8, 0x76, 0x6B, 0x4A, 0x7D, 0x65, 0x50, 0x90, 0x1A, 0xEB, 0x83, 0xE1, 0xF1, 0xC2, 0x96, 0x98, 0x89, 0x45, 0x9B, 0xBB, 0xF9, 0xA8, 0x18, 0xC9, 0xB0, 0xEF, 0xFE, 0xA4, 0x24, 0xD2, 0xA8, 0x83, 0xE3, 0x7F, 0xF7, 0xAA, 0x7A, 0x72, 0xBD, 0x90, 0xC1, 0x19, 0x1A, 0xDD, 0x23, 0xA7, 0xD4, 0x8D, 0xA9, 0xAE, 0xC7, 0x4D, 0xF4, 0x62, 0x2D, 0x19, 0x26, 0x30, 0xDE, 0xBF, 0xB2, 0x84, 0x6D, 0x96, 0x8, 0x95, 0x19, 0x87, 0xD8, 0x48, 0xEF, 0xAB, 0x93, 0x25, 0xA7, 0x3C, 0xA6, 0xF, 0x58, 0x87, 0x68, 0x35, 0xC3, 0xCA, 0xFC, 0xE9, 0x36, 0x4B, 0x0, 0xF6, 0x90, 0xD1, 0x77, 0x7B, 0xDD, 0x27, 0x16, 0x95, 0x5A, 0x15, 0x50, 0x4, 0xF2, 0xBE, 0xB3, 0x12, 0xB5, 0x67, 0x6C, 0xEF, 0xD5, 0x30, 0x74, 0x49, 0x82, 0x6D, 0x50, 0xE3, 0xB0, 0x95, 0x1B, 0xF9, 0xF6, 0x85, 0x49, 0x28, 0x9A, 0x34, 0x50, 0xEC, 0x12, 0x5E, 0x70, 0x27, 0xE0, 0xC, 0xAC, 0x6B, 0x95, 0xB6, 0x7F, 0x7E, 0x85, 0xB2, 0x15, 0xB0, 0x2F, 0x94, 0x98, 0xD7, 0xFA, 0x3F, 0x72, 0x8, 0x48, 0xD8, 0xD9, 0xF1, 0xC, 0x99, 0x53, 0x23, 0xE6, 0x8B, 0x5D, 0x55, 0x51, 0x4F, 0x58, 0xE9, 0xA4, 0x94, 0x25, 0xD8, 0x23, 0xEC, 0x19, 0x43, 0xA6, 0xCB, 0xB3, 0xB9, 0x8F, 0x5B, 0x9A, 0x7E, 0x83, 0xB6, 0x9E, 0x87, 0x55, 0xF8, 0x3C, 0x7D, 0xEF, 0xFE, 0xC1, 0x15, 0xCC, 0xCA, 0x43, 0x2C, 0x88, 0xCC, 0xA4, 0x6E, 0xD5, 0x47, 0x60, 0x56, 0x89, 0x96, 0x66, 0xF9, 0x37, 0xA1, 0x65, 0xCD, 0x5B, 0xE6, 0x92, 0xEC, 0x29, 0x3, 0xF4, 0x3F, 0xEC, 0x26, 0xED, 0x2A, 0x1E, 0xBD, 0x7D, 0x6C, 0xCE, 0x40, 0x14, 0x89, 0xDB, 0x1E, 0xEC, 0x94, 0x66, 0xE1, 0x92, 0xC8, 0x55, 0x9F, 0xF1, 0x29, 0xC, 0xD3, 0x3C, 0x10, 0xFE, 0xC1, 0xC4, 0x30, 0x53, 0x10, 0x60, 0x7D, 0x90, 0x10, 0x7D, 0xA3, 0x19, 0x46, 0xFA, 0xB5, 0x1E, 0x48, 0x88, 0xF8, 0x20, 0xAD, 0x31, 0xA2, 0x4E, 0x48, 0x40, 0x6C, 0x69, 0x3, 0xF5, 0xEF, 0xD6, 0x92, 0x7A, 0x95, 0xB8, 0x5D, 0x3F, 0xCA, 0x6A, 0xAE, 0x68, 0x2A, 0x64, 0x0, 0x57, 0x50, 0x88, 0x4A, 0x4D, 0xE5, 0x0, 0xAE, 0x3F, 0xA1, 0xF6, 0xD1, 0x90, 0x58, 0x2, 0x6E, 0x5C, 0x9D, 0xCD, 0x35, 0xAF, 0xD9, 0x7F, 0x67, 0xCB, 0x3B, 0x77, 0xE5, 0xA9, 0x1C, 0xFD, 0x13, 0xED, 0xAF, 0xE8, 0xA9, 0x6B, 0x74, 0xE3, 0xE3, 0x1A, 0x79, 0xBB, 0xDB, 0xEB, 0xE7, 0xC6, 0xC2, 0xC3, 0x84, 0xA6, 0xFB, 0xE2, 0x64, 0xB4, 0x81, 0xF3, 0xF9, 0x7F, 0x7F, 0x2F, 0x5D, 0xA5, 0xEB, 0xAB, 0xCD, 0x8F, 0x5A, 0x3B, 0xAC, 0x24, 0xF0, 0x6D, 0x70, 0x12, 0xAE, 0x82, 0xA8, 0x9, 0x8A, 0xAA, 0x35, 0x42, 0xAA, 0x7A, 0xF8, 0xCC, 0xE, 0x6A, 0x47, 0x53, 0x5A, 0xF8, 0xB3, 0x31, 0x41, 0xF, 0xD9, 0x71, 0x5C, 0xE4, 0xDA, 0x9F, 0xBE, 0x84, 0xC5, 0x18, 0x5C, 0x90, 0x8E, 0x81, 0x45, 0xDD, 0xFE, 0x57, 0xAF, 0xC9, 0xA7, 0x2A, 0x4A, 0xDD, 0x4D, 0x78, 0xFB, 0x52, 0x4D, 0x8C, 0xD7, 0xFD, 0xCB, 0xB4, 0xFB, 0xD8, 0x78, 0x1C, 0xBC, 0xC0, 0xD9, 0x48, 0x61, 0x45, 0x46, 0xE, 0x4E, 0x70, 0xC5, 0xE1, 0xFC, 0x4A, 0x85, 0x34, 0x8E, 0x5A, 0x2, 0x87, 0xC, 0x9D, 0xE7, 0xA3, 0x95, 0xB5, 0xF1, 0x3, 0x40, 0x98, 0x58, 0x40, 0xF4, 0x20, 0x15, 0x1D, 0xE, 0xD4, 0xAE, 0xE8, 0x48, 0xD7, 0xAB, 0xEC, 0x13, 0x92, 0x4B, 0x5B, 0x11, 0x58, 0x7D, 0x82, 0x13, 0x59, 0x4C, 0xFA, 0x27, 0x9B, 0xA, 0x52, 0xBF, 0x9F, 0x11, 0x5F, 0x89, 0xD, 0xE8, 0x2, 0xED, 0xB7, 0x4, 0x81, 0x7E, 0xCD, 0x8E, 0xC9, 0x1, 0xF0, 0x53, 0x48, 0x79, 0x5D, 0x40, 0x19, 0xA4, 0x21, 0x1C, 0x5C, 0xBD, 0x7C, 0x2E, 0xB8, 0xF, 0xE6, 0x47, 0x27, 0xEB, 0xA, 0x56, 0xE9, 0xCE, 0x91, 0x41, 0xDC, 0x23, 0x76, 0xE4, 0xB1, 0x80, 0x3B, 0x17, 0x6D, 0xBC, 0x19, 0xAB, 0xEB, 0xFB, 0x42, 0xA5, 0xBC, 0x23, 0xDD, 0x2F, 0x7, 0x76, 0x6E, 0xF3, 0xD1, 0x79, 0xD0, 0x86, 0xA0, 0x81, 0xFC, 0xAE, 0x31, 0x5, 0xAC, 0xC1, 0x39, 0xEF, 0x22, 0xA4, 0x72, 0x65, 0xE7, 0x5, 0x30, 0x6A, 0xD, 0x8C, 0xFA, 0x9C, 0xA8, 0xD6, 0x68, 0x5, 0xE5, 0x38, 0xB4, 0x82, 0x82, 0x16, 0xA, 0xC3, 0x9C, 0xFA, 0x9C, 0xD0, 0x23, 0x5F, 0x25, 0xCC, 0xF8, 0x41, 0x4F, 0x84, 0x64, 0xA7, 0x7F, 0x5C, 0x77, 0xE8, 0xFB, 0xD2, 0x10, 0x4B, 0xAF, 0xBE, 0x7, 0xBA, 0x7E, 0x96, 0xF, 0xAF, 0xFD, 0xED, 0x52, 0xBD, 0x3C, 0x5B, 0x48, 0x7B, 0xB, 0x14, 0x5, 0x99, 0x55, 0xF6, 0x4B, 0x6, 0x64, 0x83, 0x2D, 0x85, 0xA6, 0x9D, 0xDA, 0x51, 0x6D, 0xE5, 0x77, 0xE2, 0xBD, 0xD8, 0x96, 0xD2, 0x23, 0x4C, 0xD7, 0x84, 0x78, 0xE3, 0x2C, 0x9A, 0xB1, 0x31, 0x61, 0x45, 0x34, 0xED, 0x15, 0x3F, 0xF, 0x6B, 0x98, 0xD0, 0x82, 0xA1, 0xC0, 0x58, 0xB1, 0x21, 0xF, 0xC5, 0x3B, 0x54, 0x8A, 0xCF, 0xD6, 0x9, 0xDF, 0x7A, 0x4, 0x64, 0x1B, 0x7D, 0xF2, 0xC2, 0xCB, 0x6D, 0xDA, 0xBD, 0x3C, 0x79, 0x22, 0xF2, 0xFF, 0x82, 0xE9, 0x35, 0x61, 0x9, 0x31, 0x21, 0x94, 0xA9, 0xEB, 0x57, 0xCF, 0x14, 0x53, 0x6D, 0x8B, 0x12, 0xDB, 0x92, 0xBA, 0x85, 0xEB, 0x77, 0x2E, 0x70, 0x25, 0x6E, 0xDE, 0x38, 0x6A, 0x72, 0xFE, 0xF9, 0x1C, 0x46, 0x74, 0xE5, 0x4D, 0x0, 0x74, 0x9F, 0xB2, 0xFF, 0x19, 0x96, 0xD0, 0x45, 0x4D, 0x1C, 0x12, 0x4E, 0x83, 0x7B, 0x8F, 0xA8, 0x32, 0x27, 0x33, 0x7, 0x2F, 0x5B, 0xE1, 0xFC, 0x10, 0xF7, 0xD4, 0xA, 0x4, 0x38, 0x3C, 0x9A, 0xD2, 0xC0, 0x8, 0xD3, 0xDB, 0x39, 0xC, 0x8D, 0x42, 0x5, 0xC2, 0x36, 0x99, 0xF6, 0x25, 0xE, 0xE1, 0x72, 0x8B, 0xBC, 0x8E, 0x6C, 0x16, 0xA3, 0x95, 0x17, 0xC6, 0x54, 0x73, 0xBC, 0x86, 0xED, 0x8C, 0xF, 0xB6, 0x4B, 0x5E, 0x12, 0x70, 0xE3, 0x96, 0x45, 0xFB, 0x90, 0x83, 0x9D, 0xEA, 0xF6, 0xD0, 0xFC, 0x7E, 0xCA, 0xA1, 0x39, 0xAC, 0x84, 0x2A, 0x51, 0x94, 0x5D, 0xCD, 0x9A, 0x91, 0x3, 0xC2, 0xED, 0xC3, 0xA0, 0x11, 0xFD, 0xC2, 0xCF, 0x1A, 0x13, 0xA, 0x91, 0xD9, 0x7B, 0x2F, 0xD, 0xCA, 0xA5, 0xA4, 0x54, 0xC7, 0xB1, 0x27, 0xDD, 0x50, 0xAE, 0x43, 0x59, 0xB8, 0x99, 0xB3, 0xDB, 0x2F, 0xC1, 0xF1, 0xC1, 0xA9, 0x6E, 0x25, 0x22, 0x8B, 0x6A, 0xFD, 0xC3, 0x7F, 0xA9, 0x26, 0x31, 0x3F, 0xE5, 0x36, 0xA1, 0x78, 0xB0, 0x39, 0xF6, 0xE, 0x97, 0x9B, 0x55, 0x31, 0x97, 0x4B, 0xF2, 0x92, 0xAE, 0x8C, 0x9E, 0x8B, 0xDE, 0xED, 0xD7, 0x2B, 0x1B, 0x0, 0xD5, 0x83, 0xC, 0xB9, 0x56, 0xFD, 0x94, 0xEF, 0x1C, 0x7C, 0xA, 0x14, 0xAB, 0x69, 0x65, 0xCA, 0xB, 0x99, 0x71, 0xF1, 0x54, 0xAE, 0xAB, 0x79, 0xBC, 0x47, 0x9B, 0x35, 0x24, 0xC8, 0x2B, 0xAF, 0x7B, 0xD2, 0x8, 0x6C, 0xE2, 0x28, 0x13, 0x37, 0x86, 0x70, 0xBC, 0x50, 0x5C, 0x52, 0x8, 0x65, 0x2C, 0xCD, 0x20, 0x22, 0xEE, 0xF2, 0xBC, 0x88, 0xA7, 0x4E, 0xFE, 0xB2, 0xC8, 0xC2, 0xD8, 0x5C, 0x32, 0x11, 0x2C, 0xCF, 0x42, 0xE9, 0xCE, 0x1B, 0xAF, 0xBF, 0xCF, 0xE1, 0xFA, 0x8E, 0x9F, 0x41, 0xC4, 0xA0, 0x84, 0x3A, 0xAD, 0x86, 0xE3, 0xA2, 0x3E, 0xDC, 0x76, 0xC6, 0x4F, 0xE, 0x5D, 0x66, 0xA9, 0x41, 0x2A, 0x5F, 0xF5, 0xC7, 0xFB, 0xAB, 0x4, 0x6F, 0xB5, 0x28, 0x7B, 0x94, 0x13, 0xA8, 0xBE, 0x4E, 0x64, 0xFB, 0xA6, 0xEF, 0x52, 0x71, 0x95, 0x10, 0x56, 0xA2, 0x88, 0x87, 0x41, 0x48, 0x85, 0xEC, 0xCC, 0x70, 0xAD, 0x4E, 0xEA, 0x40, 0xA0, 0xC5, 0x88, 0x2D, 0xE7, 0x35, 0x51, 0xC6, 0xE5, 0xD9, 0xC6, 0x89, 0xC8, 0x43, 0x70, 0xF0, 0x73, 0x96, 0x87, 0x5F, 0x97, 0xE5, 0x8D, 0x67, 0xD0, 0x3E, 0x92, 0xE4, 0xC0, 0xF1, 0x69, 0x8E, 0x8B, 0x20, 0xB8, 0xAD, 0x7D, 0xF, 0x1F, 0x20, 0x23, 0x1D, 0xB3, 0x86, 0xCC, 0x24, 0x55, 0x88, 0x50, 0xAB, 0x1C, 0x84, 0xC2, 0xE8, 0x79, 0x5E, 0x34, 0xDE, 0x5A, 0xB8, 0x48, 0xC1, 0xBB, 0xB, 0xB6, 0xA4, 0xF9, 0xE8, 0x8A, 0x75, 0x37, 0x10, 0x15, 0x18, 0x26, 0x79, 0xDE, 0xD9, 0x28, 0x1C, 0xB0, 0xB0, 0x3D, 0x5B, 0x29, 0x8D, 0xDD, 0x37, 0x6, 0xA, 0xDC, 0xA6, 0xCF, 0x2A, 0x46, 0xD4, 0x3C, 0x84, 0x90, 0x67, 0x73, 0xF, 0xE2, 0x95, 0x48, 0xAA, 0x66, 0x40, 0xCD, 0x5F, 0x77, 0xFF, 0x18, 0xF5, 0x15, 0xB3, 0x30, 0x12, 0xA9, 0x9B, 0x32, 0x3F, 0xAB, 0xA0, 0x39, 0x1E, 0xD3, 0x9E, 0x97, 0x94, 0x7, 0x5B, 0x71, 0x5E, 0xA0, 0x15, 0xA7, 0x7E, 0xAA, 0xC8, 0x16, 0x2A, 0x72, 0x35, 0xAD, 0x90, 0xE8, 0xD2, 0xDC, 0x36, 0x33, 0x62, 0x2C, 0x6B, 0x84, 0x95, 0x2C, 0x76, 0x82, 0xB1, 0xD, 0x40, 0x42, 0x3D, 0xE9, 0x93, 0xB7, 0x41, 0xAE, 0x4A, 0xBB, 0x87, 0xF0, 0x4B, 0x5E, 0xF5, 0xCC, 0xA4, 0xCD, 0x93, 0x37, 0xEF, 0xD8, 0x60, 0xA0, 0xB8, 0x53, 0x96, 0x68, 0xEA, 0xB7, 0x91, 0x37, 0xD2, 0xE3, 0xDB, 0x2F, 0x60, 0x48, 0x8E, 0x51, 0xE4, 0xEB, 0x18, 0x9F, 0x46, 0x2E, 0xC3, 0x84, 0xF7, 0xFE, 0xD7, 0xD8, 0xBE, 0x7E, 0x5F, 0x70, 0x1B, 0xE2, 0x5F, 0x83, 0x75, 0x7A, 0xE0, 0x8C, 0x82, 0x3C, 0x63, 0xB0, 0xEA, 0x31, 0xEA, 0x23, 0xB6, 0xE1, 0x4, 0xC, 0x14, 0x5D, 0x82, 0xB5, 0xAC, 0xDB, 0x7A, 0xC4, 0x54, 0xE1, 0x7, 0x1D, 0xB8, 0x17, 0xD0, 0xC3, 0x4D, 0x64, 0xC5, 0xFE, 0xC, 0x45, 0xB7, 0xB5, 0x8D, 0x29, 0x9C, 0x4D, 0x62, 0xD7, 0xC, 0x4C, 0xBD, 0x28, 0x76, 0xE6, 0x51, 0x46, 0x7, 0xFC, 0xC0, 0xB9, 0xA, 0x73, 0xFF, 0xF1, 0xDD, 0xF4, 0x3E, 0xB1, 0xB9, 0x0, 0x7D, 0x65, 0xE0, 0xE4, 0x6B, 0xB7, 0x5D, 0xFF, 0x61, 0x9A, 0xAB, 0xBE, 0xB0, 0x4D, 0x11, 0x21, 0x8C, 0xFF, 0xCD, 0x5D, 0xDE, 0x8B };
    }

    public static Texture2D mTex;
}
